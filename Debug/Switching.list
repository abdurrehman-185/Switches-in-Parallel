
Switching.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056bc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800586c  0800586c  0000686c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005980  08005980  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005980  08005980  00006980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005988  08005988  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005988  08005988  00006988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800598c  0800598c  0000698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005990  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a34  20000060  080059f0  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a94  080059f0  00007a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c47  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025be  00000000  00000000  00017cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  0001a298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa3  00000000  00000000  0001b070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aea6  00000000  00000000  0001bb13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e51  00000000  00000000  000469b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b8fd  00000000  00000000  0005780a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00163107  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e78  00000000  00000000  0016314c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00166fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005854 	.word	0x08005854

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08005854 	.word	0x08005854

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_ADC_ConvCpltCallback>:
    MX_ADC1_Init();
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)raw, NUM_SAMPLES);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
    convCompleted = 1;
 8000598:	4b04      	ldr	r3, [pc, #16]	@ (80005ac <HAL_ADC_ConvCpltCallback+0x1c>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	200018a0 	.word	0x200018a0

080005b0 <calculate_and_print_average>:

void calculate_and_print_average(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b09a      	sub	sp, #104	@ 0x68
 80005b4:	af00      	add	r7, sp, #0
    uint16_t pot = potSum / NUM_SAMPLES;
 80005b6:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <calculate_and_print_average+0x4c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a11      	ldr	r2, [pc, #68]	@ (8000600 <calculate_and_print_average+0x50>)
 80005bc:	fba2 2303 	umull	r2, r3, r2, r3
 80005c0:	099b      	lsrs	r3, r3, #6
 80005c2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    char msg[100];

    sprintf(msg, "Average POT: %hu\r\n", pot);
 80005c6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80005ca:	463b      	mov	r3, r7
 80005cc:	490d      	ldr	r1, [pc, #52]	@ (8000604 <calculate_and_print_average+0x54>)
 80005ce:	4618      	mov	r0, r3
 80005d0:	f004 fca0 	bl	8004f14 <siprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80005d4:	463b      	mov	r3, r7
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fe0a 	bl	80001f0 <strlen>
 80005dc:	4603      	mov	r3, r0
 80005de:	b29a      	uxth	r2, r3
 80005e0:	4639      	mov	r1, r7
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	4808      	ldr	r0, [pc, #32]	@ (8000608 <calculate_and_print_average+0x58>)
 80005e8:	f003 ff36 	bl	8004458 <HAL_UART_Transmit>

    potSum = 0;
 80005ec:	4b03      	ldr	r3, [pc, #12]	@ (80005fc <calculate_and_print_average+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
}
 80005f2:	bf00      	nop
 80005f4:	3768      	adds	r7, #104	@ 0x68
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000189c 	.word	0x2000189c
 8000600:	057619f1 	.word	0x057619f1
 8000604:	0800586c 	.word	0x0800586c
 8000608:	200018a4 	.word	0x200018a4

0800060c <MX_DMA_Init>:

void MX_DMA_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000612:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <MX_DMA_Init+0x38>)
 8000614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000616:	4a0b      	ldr	r2, [pc, #44]	@ (8000644 <MX_DMA_Init+0x38>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6493      	str	r3, [r2, #72]	@ 0x48
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <MX_DMA_Init+0x38>)
 8000620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Channel1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	200b      	movs	r0, #11
 8000630:	f001 ff6f 	bl	8002512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000634:	200b      	movs	r0, #11
 8000636:	f001 ff88 	bl	800254a <HAL_NVIC_EnableIRQ>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000

08000648 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	@ 0x28
 800064c:	af00      	add	r7, sp, #0
    ADC_MultiModeTypeDef multimode = {0};
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
 8000668:	615a      	str	r2, [r3, #20]

    hadc1.Instance = ADC1;
 800066a:	4b2f      	ldr	r3, [pc, #188]	@ (8000728 <MX_ADC1_Init+0xe0>)
 800066c:	4a2f      	ldr	r2, [pc, #188]	@ (800072c <MX_ADC1_Init+0xe4>)
 800066e:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000670:	4b2d      	ldr	r3, [pc, #180]	@ (8000728 <MX_ADC1_Init+0xe0>)
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000676:	4b2c      	ldr	r3, [pc, #176]	@ (8000728 <MX_ADC1_Init+0xe0>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067c:	4b2a      	ldr	r3, [pc, #168]	@ (8000728 <MX_ADC1_Init+0xe0>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000682:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <MX_ADC1_Init+0xe0>)
 8000684:	2201      	movs	r2, #1
 8000686:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000688:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <MX_ADC1_Init+0xe0>)
 800068a:	2204      	movs	r2, #4
 800068c:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 800068e:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <MX_ADC1_Init+0xe0>)
 8000690:	2200      	movs	r2, #0
 8000692:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8000694:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <MX_ADC1_Init+0xe0>)
 8000696:	2201      	movs	r2, #1
 8000698:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;
 800069a:	4b23      	ldr	r3, [pc, #140]	@ (8000728 <MX_ADC1_Init+0xe0>)
 800069c:	2201      	movs	r2, #1
 800069e:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a0:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <MX_ADC1_Init+0xe0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <MX_ADC1_Init+0xe0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <MX_ADC1_Init+0xe0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <MX_ADC1_Init+0xe0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <MX_ADC1_Init+0xe0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE;
 80006c2:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <MX_ADC1_Init+0xe0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ca:	4817      	ldr	r0, [pc, #92]	@ (8000728 <MX_ADC1_Init+0xe0>)
 80006cc:	f000 fe26 	bl	800131c <HAL_ADC_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0x92>
    {
        Error_Handler();
 80006d6:	f000 f91f 	bl	8000918 <Error_Handler>
    }

    multimode.Mode = ADC_MODE_INDEPENDENT;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	4810      	ldr	r0, [pc, #64]	@ (8000728 <MX_ADC1_Init+0xe0>)
 80006e6:	f001 fd89 	bl	80021fc <HAL_ADCEx_MultiModeConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0xac>
    {
        Error_Handler();
 80006f0:	f000 f912 	bl	8000918 <Error_Handler>
    }

    sConfig.Channel = ADC_CHANNEL_1;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_ADC1_Init+0xe8>)
 80006f6:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f8:	2306      	movs	r3, #6
 80006fa:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80006fc:	2306      	movs	r3, #6
 80006fe:	60fb      	str	r3, [r7, #12]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000700:	237f      	movs	r3, #127	@ 0x7f
 8000702:	613b      	str	r3, [r7, #16]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000704:	2304      	movs	r3, #4
 8000706:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_ADC1_Init+0xe0>)
 8000712:	f001 f827 	bl	8001764 <HAL_ADC_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0xd8>
    {
        Error_Handler();
 800071c:	f000 f8fc 	bl	8000918 <Error_Handler>
    }
}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	@ 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000007c 	.word	0x2000007c
 800072c:	50040000 	.word	0x50040000
 8000730:	04300002 	.word	0x04300002

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f000 fb6e 	bl	8000e1a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f849 	bl	80007d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 f8c5 	bl	80008d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000746:	f7ff ff61 	bl	800060c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800074a:	f000 f895 	bl	8000878 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800074e:	f7ff ff7b 	bl	8000648 <MX_ADC1_Init>

  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)raw, NUM_SAMPLES);
 8000752:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000756:	491b      	ldr	r1, [pc, #108]	@ (80007c4 <main+0x90>)
 8000758:	481b      	ldr	r0, [pc, #108]	@ (80007c8 <main+0x94>)
 800075a:	f000 ff33 	bl	80015c4 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (convCompleted)
 800075e:	4b1b      	ldr	r3, [pc, #108]	@ (80007cc <main+0x98>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d029      	beq.n	80007ba <main+0x86>
    {
        potSum = 0;
 8000766:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <main+0x9c>)
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]

        for (uint16_t i = 0; i < NUM_SAMPLES; i++)
 800076c:	2300      	movs	r3, #0
 800076e:	80fb      	strh	r3, [r7, #6]
 8000770:	e013      	b.n	800079a <main+0x66>
        {
            potSum += raw[i];
 8000772:	88fb      	ldrh	r3, [r7, #6]
 8000774:	4a13      	ldr	r2, [pc, #76]	@ (80007c4 <main+0x90>)
 8000776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800077a:	461a      	mov	r2, r3
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <main+0x9c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4413      	add	r3, r2
 8000782:	4a13      	ldr	r2, [pc, #76]	@ (80007d0 <main+0x9c>)
 8000784:	6013      	str	r3, [r2, #0]
            controlLED(raw[i]);  // Call function from switch.c
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	4a0e      	ldr	r2, [pc, #56]	@ (80007c4 <main+0x90>)
 800078a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fa1e 	bl	8000bd0 <controlLED>
        for (uint16_t i = 0; i < NUM_SAMPLES; i++)
 8000794:	88fb      	ldrh	r3, [r7, #6]
 8000796:	3301      	adds	r3, #1
 8000798:	80fb      	strh	r3, [r7, #6]
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d9e6      	bls.n	8000772 <main+0x3e>
        }

        calculate_and_print_average();
 80007a4:	f7ff ff04 	bl	80005b0 <calculate_and_print_average>

        convCompleted = 0;
 80007a8:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <main+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]

        HAL_ADC_Start_DMA(&hadc1, (uint32_t *)raw, NUM_SAMPLES);
 80007ae:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80007b2:	4904      	ldr	r1, [pc, #16]	@ (80007c4 <main+0x90>)
 80007b4:	4804      	ldr	r0, [pc, #16]	@ (80007c8 <main+0x94>)
 80007b6:	f000 ff05 	bl	80015c4 <HAL_ADC_Start_DMA>
    }

    HAL_Delay(1000);
 80007ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007be:	f000 fba1 	bl	8000f04 <HAL_Delay>
    if (convCompleted)
 80007c2:	e7cc      	b.n	800075e <main+0x2a>
 80007c4:	2000012c 	.word	0x2000012c
 80007c8:	2000007c 	.word	0x2000007c
 80007cc:	200018a0 	.word	0x200018a0
 80007d0:	2000189c 	.word	0x2000189c

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b096      	sub	sp, #88	@ 0x58
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2244      	movs	r2, #68	@ 0x44
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 fbb6 	bl	8004f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007fa:	f002 fa71 	bl	8002ce0 <HAL_PWREx_ControlVoltageScaling>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000804:	f000 f888 	bl	8000918 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000810:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000812:	2340      	movs	r3, #64	@ 0x40
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081a:	2302      	movs	r3, #2
 800081c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800081e:	2301      	movs	r3, #1
 8000820:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000822:	230a      	movs	r3, #10
 8000824:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000826:	2302      	movs	r3, #2
 8000828:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fab8 	bl	8002dac <HAL_RCC_OscConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000842:	f000 f869 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2303      	movs	r3, #3
 800084c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000852:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000856:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	2104      	movs	r1, #4
 8000860:	4618      	mov	r0, r3
 8000862:	f002 febd 	bl	80035e0 <HAL_RCC_ClockConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800086c:	f000 f854 	bl	8000918 <Error_Handler>
  }
}
 8000870:	bf00      	nop
 8000872:	3758      	adds	r7, #88	@ 0x58
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <MX_LPUART1_UART_Init+0x50>)
 800087e:	4a13      	ldr	r2, [pc, #76]	@ (80008cc <MX_LPUART1_UART_Init+0x54>)
 8000880:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_LPUART1_UART_Init+0x50>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <MX_LPUART1_UART_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <MX_LPUART1_UART_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_LPUART1_UART_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <MX_LPUART1_UART_Init+0x50>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_LPUART1_UART_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a8:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <MX_LPUART1_UART_Init+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_LPUART1_UART_Init+0x50>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_LPUART1_UART_Init+0x50>)
 80008b6:	f003 fd81 	bl	80043bc <HAL_UART_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80008c0:	f000 f82a 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200018a4 	.word	0x200018a4
 80008cc:	40008000 	.word	0x40008000

080008d0 <MX_GPIO_Init>:
/**
  * Enable DMA controller clock
  */

static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_GPIO_Init+0x44>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	4a0e      	ldr	r2, [pc, #56]	@ (8000914 <MX_GPIO_Init+0x44>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_GPIO_Init+0x44>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_GPIO_Init+0x44>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	4a08      	ldr	r2, [pc, #32]	@ (8000914 <MX_GPIO_Init+0x44>)
 80008f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_GPIO_Init+0x44>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000906:	f002 fa41 	bl	8002d8c <HAL_PWREx_EnableVddIO2>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <Error_Handler+0x8>

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <HAL_MspInit+0x44>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092e:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <HAL_MspInit+0x44>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6613      	str	r3, [r2, #96]	@ 0x60
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <HAL_MspInit+0x44>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <HAL_MspInit+0x44>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000946:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <HAL_MspInit+0x44>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	6593      	str	r3, [r2, #88]	@ 0x58
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <HAL_MspInit+0x44>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b0ac      	sub	sp, #176	@ 0xb0
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	228c      	movs	r2, #140	@ 0x8c
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f004 fae1 	bl	8004f54 <memset>
  if(hadc->Instance==ADC1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a3c      	ldr	r2, [pc, #240]	@ (8000a88 <HAL_ADC_MspInit+0x11c>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d171      	bne.n	8000a80 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800099c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80009a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80009a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80009aa:	2302      	movs	r3, #2
 80009ac:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80009b2:	2308      	movs	r3, #8
 80009b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80009b6:	2302      	movs	r3, #2
 80009b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80009c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 f82b 	bl	8003a28 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80009d8:	f7ff ff9e 	bl	8000918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009dc:	4b2b      	ldr	r3, [pc, #172]	@ (8000a8c <HAL_ADC_MspInit+0x120>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e0:	4a2a      	ldr	r2, [pc, #168]	@ (8000a8c <HAL_ADC_MspInit+0x120>)
 80009e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e8:	4b28      	ldr	r3, [pc, #160]	@ (8000a8c <HAL_ADC_MspInit+0x120>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f4:	4b25      	ldr	r3, [pc, #148]	@ (8000a8c <HAL_ADC_MspInit+0x120>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f8:	4a24      	ldr	r2, [pc, #144]	@ (8000a8c <HAL_ADC_MspInit+0x120>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a00:	4b22      	ldr	r3, [pc, #136]	@ (8000a8c <HAL_ADC_MspInit+0x120>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a12:	2303      	movs	r3, #3
 8000a14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a22:	4619      	mov	r1, r3
 8000a24:	481a      	ldr	r0, [pc, #104]	@ (8000a90 <HAL_ADC_MspInit+0x124>)
 8000a26:	f001 ffa3 	bl	8002970 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000a98 <HAL_ADC_MspInit+0x12c>)
 8000a2e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000a30:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a36:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a42:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a44:	2280      	movs	r2, #128	@ 0x80
 8000a46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a50:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a56:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a64:	480b      	ldr	r0, [pc, #44]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a66:	f001 fd8b 	bl	8002580 <HAL_DMA_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8000a70:	f7ff ff52 	bl	8000918 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a07      	ldr	r2, [pc, #28]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a78:	651a      	str	r2, [r3, #80]	@ 0x50
 8000a7a:	4a06      	ldr	r2, [pc, #24]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a80:	bf00      	nop
 8000a82:	37b0      	adds	r7, #176	@ 0xb0
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	50040000 	.word	0x50040000
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	48000800 	.word	0x48000800
 8000a94:	200000e4 	.word	0x200000e4
 8000a98:	40020008 	.word	0x40020008

08000a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b0ac      	sub	sp, #176	@ 0xb0
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	228c      	movs	r2, #140	@ 0x8c
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f004 fa49 	bl	8004f54 <memset>
  if(huart->Instance==LPUART1)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a22      	ldr	r2, [pc, #136]	@ (8000b50 <HAL_UART_MspInit+0xb4>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d13d      	bne.n	8000b48 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000acc:	2320      	movs	r3, #32
 8000ace:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f002 ffa5 	bl	8003a28 <HAL_RCCEx_PeriphCLKConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ae4:	f7ff ff18 	bl	8000918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <HAL_UART_MspInit+0xb8>)
 8000aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000aec:	4a19      	ldr	r2, [pc, #100]	@ (8000b54 <HAL_UART_MspInit+0xb8>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000af4:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <HAL_UART_MspInit+0xb8>)
 8000af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b00:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <HAL_UART_MspInit+0xb8>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b04:	4a13      	ldr	r2, [pc, #76]	@ (8000b54 <HAL_UART_MspInit+0xb8>)
 8000b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <HAL_UART_MspInit+0xb8>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000b18:	f002 f938 	bl	8002d8c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000b1c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b36:	2308      	movs	r3, #8
 8000b38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b40:	4619      	mov	r1, r3
 8000b42:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <HAL_UART_MspInit+0xbc>)
 8000b44:	f001 ff14 	bl	8002970 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000b48:	bf00      	nop
 8000b4a:	37b0      	adds	r7, #176	@ 0xb0
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40008000 	.word	0x40008000
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48001800 	.word	0x48001800

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <NMI_Handler+0x4>

08000b64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <MemManage_Handler+0x4>

08000b74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb2:	f000 f987 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bc0:	4802      	ldr	r0, [pc, #8]	@ (8000bcc <DMA1_Channel1_IRQHandler+0x10>)
 8000bc2:	f001 fdf5 	bl	80027b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200000e4 	.word	0x200000e4

08000bd0 <controlLED>:
void Switch_Init(void)
{
}

void controlLED(uint32_t adc_value)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b09c      	sub	sp, #112	@ 0x70
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
    static uint8_t led_state = 0;
    char msg[100];

    if (adc_value >= ADC_THRESHOLD_ON && led_state == 0) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000bde:	d360      	bcc.n	8000ca2 <controlLED+0xd2>
 8000be0:	4b48      	ldr	r3, [pc, #288]	@ (8000d04 <controlLED+0x134>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d15c      	bne.n	8000ca2 <controlLED+0xd2>

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2180      	movs	r1, #128	@ 0x80
 8000bec:	4846      	ldr	r0, [pc, #280]	@ (8000d08 <controlLED+0x138>)
 8000bee:	f002 f851 	bl	8002c94 <HAL_GPIO_WritePin>
        led_state = 1;
 8000bf2:	4b44      	ldr	r3, [pc, #272]	@ (8000d04 <controlLED+0x134>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
        switchOnTime = HAL_GetTick();  // Record the time when the switch was turned on
 8000bf8:	f000 f978 	bl	8000eec <HAL_GetTick>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4a43      	ldr	r2, [pc, #268]	@ (8000d0c <controlLED+0x13c>)
 8000c00:	6013      	str	r3, [r2, #0]

        if (current_switch == 1) {
 8000c02:	4b43      	ldr	r3, [pc, #268]	@ (8000d10 <controlLED+0x140>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d110      	bne.n	8000c2e <controlLED+0x5e>
            counter_sw1++;
 8000c0c:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <controlLED+0x144>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	4a40      	ldr	r2, [pc, #256]	@ (8000d14 <controlLED+0x144>)
 8000c14:	6013      	str	r3, [r2, #0]
            sprintf(msg, "SW1 ON, LED ON (%lu times)\r\n", counter_sw1);
 8000c16:	4b3f      	ldr	r3, [pc, #252]	@ (8000d14 <controlLED+0x144>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	493e      	ldr	r1, [pc, #248]	@ (8000d18 <controlLED+0x148>)
 8000c20:	4618      	mov	r0, r3
 8000c22:	f004 f977 	bl	8004f14 <siprintf>
            current_switch = 2;
 8000c26:	4b3a      	ldr	r3, [pc, #232]	@ (8000d10 <controlLED+0x140>)
 8000c28:	2202      	movs	r2, #2
 8000c2a:	701a      	strb	r2, [r3, #0]
 8000c2c:	e02a      	b.n	8000c84 <controlLED+0xb4>
        } else if (current_switch == 2) {
 8000c2e:	4b38      	ldr	r3, [pc, #224]	@ (8000d10 <controlLED+0x140>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d110      	bne.n	8000c5a <controlLED+0x8a>
            counter_sw2++;
 8000c38:	4b38      	ldr	r3, [pc, #224]	@ (8000d1c <controlLED+0x14c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	4a37      	ldr	r2, [pc, #220]	@ (8000d1c <controlLED+0x14c>)
 8000c40:	6013      	str	r3, [r2, #0]
            sprintf(msg, "SW2 ON, LED ON (%lu times)\r\n", counter_sw2);
 8000c42:	4b36      	ldr	r3, [pc, #216]	@ (8000d1c <controlLED+0x14c>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	4935      	ldr	r1, [pc, #212]	@ (8000d20 <controlLED+0x150>)
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 f961 	bl	8004f14 <siprintf>
            current_switch = 3;
 8000c52:	4b2f      	ldr	r3, [pc, #188]	@ (8000d10 <controlLED+0x140>)
 8000c54:	2203      	movs	r2, #3
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	e014      	b.n	8000c84 <controlLED+0xb4>
        } else if (current_switch == 3) {
 8000c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d10 <controlLED+0x140>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b03      	cmp	r3, #3
 8000c62:	d10f      	bne.n	8000c84 <controlLED+0xb4>
            counter_sw3++;
 8000c64:	4b2f      	ldr	r3, [pc, #188]	@ (8000d24 <controlLED+0x154>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	4a2e      	ldr	r2, [pc, #184]	@ (8000d24 <controlLED+0x154>)
 8000c6c:	6013      	str	r3, [r2, #0]
            sprintf(msg, "SW3 ON, LED ON (%lu times)\r\n", counter_sw3);
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d24 <controlLED+0x154>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	492c      	ldr	r1, [pc, #176]	@ (8000d28 <controlLED+0x158>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 f94b 	bl	8004f14 <siprintf>
            current_switch = 1;
 8000c7e:	4b24      	ldr	r3, [pc, #144]	@ (8000d10 <controlLED+0x140>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
        }

        HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fab1 	bl	80001f0 <strlen>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	f107 010c 	add.w	r1, r7, #12
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	4824      	ldr	r0, [pc, #144]	@ (8000d2c <controlLED+0x15c>)
 8000c9c:	f003 fbdc 	bl	8004458 <HAL_UART_Transmit>
        led_state = 0;

        sprintf(msg, "LED OFF, Switch was on for %lu ms\r\n", switchDuration);
        HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
    }
}
 8000ca0:	e02c      	b.n	8000cfc <controlLED+0x12c>
    } else if (adc_value == ADC_THRESHOLD_OFF && led_state == 1) {
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d129      	bne.n	8000cfc <controlLED+0x12c>
 8000ca8:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <controlLED+0x134>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d125      	bne.n	8000cfc <controlLED+0x12c>
        switchDuration = HAL_GetTick() - switchOnTime;  // Calculate how long the switch was on
 8000cb0:	f000 f91c 	bl	8000eec <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <controlLED+0x13c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8000d30 <controlLED+0x160>)
 8000cbe:	6013      	str	r3, [r2, #0]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2180      	movs	r1, #128	@ 0x80
 8000cc4:	4810      	ldr	r0, [pc, #64]	@ (8000d08 <controlLED+0x138>)
 8000cc6:	f001 ffe5 	bl	8002c94 <HAL_GPIO_WritePin>
        led_state = 0;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <controlLED+0x134>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
        sprintf(msg, "LED OFF, Switch was on for %lu ms\r\n", switchDuration);
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <controlLED+0x160>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	4916      	ldr	r1, [pc, #88]	@ (8000d34 <controlLED+0x164>)
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f004 f91a 	bl	8004f14 <siprintf>
        HAL_UART_Transmit(&hlpuart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fa83 	bl	80001f0 <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	f107 010c 	add.w	r1, r7, #12
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	480d      	ldr	r0, [pc, #52]	@ (8000d2c <controlLED+0x15c>)
 8000cf8:	f003 fbae 	bl	8004458 <HAL_UART_Transmit>
}
 8000cfc:	bf00      	nop
 8000cfe:	3770      	adds	r7, #112	@ 0x70
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20001940 	.word	0x20001940
 8000d08:	48000400 	.word	0x48000400
 8000d0c:	20001938 	.word	0x20001938
 8000d10:	20000000 	.word	0x20000000
 8000d14:	2000192c 	.word	0x2000192c
 8000d18:	08005880 	.word	0x08005880
 8000d1c:	20001930 	.word	0x20001930
 8000d20:	080058a0 	.word	0x080058a0
 8000d24:	20001934 	.word	0x20001934
 8000d28:	080058c0 	.word	0x080058c0
 8000d2c:	200018a4 	.word	0x200018a4
 8000d30:	2000193c 	.word	0x2000193c
 8000d34:	080058e0 	.word	0x080058e0

08000d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d40:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <_sbrk+0x5c>)
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <_sbrk+0x60>)
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d102      	bne.n	8000d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <_sbrk+0x64>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <_sbrk+0x68>)
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d207      	bcs.n	8000d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d68:	f004 f8fc 	bl	8004f64 <__errno>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	220c      	movs	r2, #12
 8000d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e009      	b.n	8000d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <_sbrk+0x64>)
 8000d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20050000 	.word	0x20050000
 8000d98:	00000400 	.word	0x00000400
 8000d9c:	20001944 	.word	0x20001944
 8000da0:	20001a98 	.word	0x20001a98

08000da4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dcc:	f7ff ffea 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd0:	480c      	ldr	r0, [pc, #48]	@ (8000e04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd2:	490d      	ldr	r1, [pc, #52]	@ (8000e08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e0c <LoopForever+0xe>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e14 <LoopForever+0x16>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df6:	f004 f8bb 	bl	8004f70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dfa:	f7ff fc9b 	bl	8000734 <main>

08000dfe <LoopForever>:

LoopForever:
    b LoopForever
 8000dfe:	e7fe      	b.n	8000dfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e00:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e0c:	08005990 	.word	0x08005990
  ldr r2, =_sbss
 8000e10:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e14:	20001a94 	.word	0x20001a94

08000e18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC1_2_IRQHandler>

08000e1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f001 fb69 	bl	80024fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f80e 	bl	8000e4c <HAL_InitTick>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d002      	beq.n	8000e3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	e001      	b.n	8000e40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e3c:	f7ff fd72 	bl	8000924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e40:	79fb      	ldrb	r3, [r7, #7]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e58:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <HAL_InitTick+0x6c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d023      	beq.n	8000ea8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e60:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <HAL_InitTick+0x70>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <HAL_InitTick+0x6c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 fb75 	bl	8002566 <HAL_SYSTICK_Config>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10f      	bne.n	8000ea2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d809      	bhi.n	8000e9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f001 fb3f 	bl	8002512 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <HAL_InitTick+0x74>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	e007      	b.n	8000eac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
 8000ea0:	e004      	b.n	8000eac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
 8000ea6:	e001      	b.n	8000eac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000000c 	.word	0x2000000c
 8000ebc:	20000004 	.word	0x20000004
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <HAL_IncTick+0x20>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_IncTick+0x24>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <HAL_IncTick+0x24>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	2000000c 	.word	0x2000000c
 8000ee8:	20001948 	.word	0x20001948

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	@ (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20001948 	.word	0x20001948

08000f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f0c:	f7ff ffee 	bl	8000eec <HAL_GetTick>
 8000f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f1c:	d005      	beq.n	8000f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <HAL_Delay+0x44>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4413      	add	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f2a:	bf00      	nop
 8000f2c:	f7ff ffde 	bl	8000eec <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d8f7      	bhi.n	8000f2c <HAL_Delay+0x28>
  {
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000000c 	.word	0x2000000c

08000f4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	431a      	orrs	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	609a      	str	r2, [r3, #8]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3360      	adds	r3, #96	@ 0x60
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <LL_ADC_SetOffset+0x44>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fec:	bf00      	nop
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	03fff000 	.word	0x03fff000

08000ffc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3360      	adds	r3, #96	@ 0x60
 800100a:	461a      	mov	r2, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3360      	adds	r3, #96	@ 0x60
 8001038:	461a      	mov	r2, r3
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	431a      	orrs	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001052:	bf00      	nop
 8001054:	371c      	adds	r7, #28
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	431a      	orrs	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	615a      	str	r2, [r3, #20]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b087      	sub	sp, #28
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3330      	adds	r3, #48	@ 0x30
 80010ba:	461a      	mov	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	4413      	add	r3, r2
 80010c8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	f003 031f 	and.w	r3, r3, #31
 80010d4:	211f      	movs	r1, #31
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	401a      	ands	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	0e9b      	lsrs	r3, r3, #26
 80010e2:	f003 011f 	and.w	r1, r3, #31
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	f003 031f 	and.w	r3, r3, #31
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	431a      	orrs	r2, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010f6:	bf00      	nop
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001102:	b480      	push	{r7}
 8001104:	b087      	sub	sp, #28
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3314      	adds	r3, #20
 8001112:	461a      	mov	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	0e5b      	lsrs	r3, r3, #25
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	4413      	add	r3, r2
 8001120:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	0d1b      	lsrs	r3, r3, #20
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	2107      	movs	r1, #7
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	401a      	ands	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	0d1b      	lsrs	r3, r3, #20
 800113c:	f003 031f 	and.w	r3, r3, #31
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	431a      	orrs	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001170:	43db      	mvns	r3, r3
 8001172:	401a      	ands	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0318 	and.w	r3, r3, #24
 800117a:	4908      	ldr	r1, [pc, #32]	@ (800119c <LL_ADC_SetChannelSingleDiff+0x44>)
 800117c:	40d9      	lsrs	r1, r3
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	400b      	ands	r3, r1
 8001182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001186:	431a      	orrs	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	0007ffff 	.word	0x0007ffff

080011a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 031f 	and.w	r3, r3, #31
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80011cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6093      	str	r3, [r2, #8]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80011f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011f4:	d101      	bne.n	80011fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001218:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800121c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001240:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001244:	d101      	bne.n	800124a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001268:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800126c:	f043 0201 	orr.w	r2, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <LL_ADC_IsEnabled+0x18>
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <LL_ADC_IsEnabled+0x1a>
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012ba:	f043 0204 	orr.w	r2, r3, #4
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d101      	bne.n	80012e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	2b08      	cmp	r3, #8
 8001306:	d101      	bne.n	800130c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b089      	sub	sp, #36	@ 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e133      	b.n	800159e <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001340:	2b00      	cmp	r3, #0
 8001342:	d109      	bne.n	8001358 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fb11 	bl	800096c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff3f 	bl	80011e0 <LL_ADC_IsDeepPowerDownEnabled>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d004      	beq.n	8001372 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff25 	bl	80011bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff5a 	bl	8001230 <LL_ADC_IsInternalRegulatorEnabled>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d115      	bne.n	80013ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff3e 	bl	8001208 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800138c:	4b86      	ldr	r3, [pc, #536]	@ (80015a8 <HAL_ADC_Init+0x28c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	099b      	lsrs	r3, r3, #6
 8001392:	4a86      	ldr	r2, [pc, #536]	@ (80015ac <HAL_ADC_Init+0x290>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	099b      	lsrs	r3, r3, #6
 800139a:	3301      	adds	r3, #1
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013a0:	e002      	b.n	80013a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f9      	bne.n	80013a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff3c 	bl	8001230 <LL_ADC_IsInternalRegulatorEnabled>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10d      	bne.n	80013da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c2:	f043 0210 	orr.w	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ce:	f043 0201 	orr.w	r2, r3, #1
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff75 	bl	80012ce <LL_ADC_REG_IsConversionOngoing>
 80013e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f040 80cc 	bne.w	800158c <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f040 80c8 	bne.w	800158c <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001400:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001404:	f043 0202 	orr.w	r2, r3, #2
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff35 	bl	8001280 <LL_ADC_IsEnabled>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d115      	bne.n	8001448 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800141c:	4864      	ldr	r0, [pc, #400]	@ (80015b0 <HAL_ADC_Init+0x294>)
 800141e:	f7ff ff2f 	bl	8001280 <LL_ADC_IsEnabled>
 8001422:	4604      	mov	r4, r0
 8001424:	4863      	ldr	r0, [pc, #396]	@ (80015b4 <HAL_ADC_Init+0x298>)
 8001426:	f7ff ff2b 	bl	8001280 <LL_ADC_IsEnabled>
 800142a:	4603      	mov	r3, r0
 800142c:	431c      	orrs	r4, r3
 800142e:	4862      	ldr	r0, [pc, #392]	@ (80015b8 <HAL_ADC_Init+0x29c>)
 8001430:	f7ff ff26 	bl	8001280 <LL_ADC_IsEnabled>
 8001434:	4603      	mov	r3, r0
 8001436:	4323      	orrs	r3, r4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d105      	bne.n	8001448 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	4619      	mov	r1, r3
 8001442:	485e      	ldr	r0, [pc, #376]	@ (80015bc <HAL_ADC_Init+0x2a0>)
 8001444:	f7ff fd82 	bl	8000f4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7e5b      	ldrb	r3, [r3, #25]
 800144c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001452:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001458:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800145e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001466:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d106      	bne.n	8001484 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147a:	3b01      	subs	r3, #1
 800147c:	045b      	lsls	r3, r3, #17
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001488:	2b00      	cmp	r3, #0
 800148a:	d009      	beq.n	80014a0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001490:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001498:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	4b46      	ldr	r3, [pc, #280]	@ (80015c0 <HAL_ADC_Init+0x2a4>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	69b9      	ldr	r1, [r7, #24]
 80014b0:	430b      	orrs	r3, r1
 80014b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff1b 	bl	80012f4 <LL_ADC_INJ_IsConversionOngoing>
 80014be:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d140      	bne.n	8001548 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d13d      	bne.n	8001548 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7e1b      	ldrb	r3, [r3, #24]
 80014d4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014d6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014de:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80014ee:	f023 0306 	bic.w	r3, r3, #6
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6812      	ldr	r2, [r2, #0]
 80014f6:	69b9      	ldr	r1, [r7, #24]
 80014f8:	430b      	orrs	r3, r1
 80014fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001502:	2b01      	cmp	r3, #1
 8001504:	d118      	bne.n	8001538 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001510:	f023 0304 	bic.w	r3, r3, #4
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800151c:	4311      	orrs	r1, r2
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001522:	4311      	orrs	r1, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001528:	430a      	orrs	r2, r1
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 0201 	orr.w	r2, r2, #1
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	e007      	b.n	8001548 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	691a      	ldr	r2, [r3, #16]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0201 	bic.w	r2, r2, #1
 8001546:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d10c      	bne.n	800156a <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f023 010f 	bic.w	r1, r3, #15
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	1e5a      	subs	r2, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	631a      	str	r2, [r3, #48]	@ 0x30
 8001568:	e007      	b.n	800157a <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 020f 	bic.w	r2, r2, #15
 8001578:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157e:	f023 0303 	bic.w	r3, r3, #3
 8001582:	f043 0201 	orr.w	r2, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	659a      	str	r2, [r3, #88]	@ 0x58
 800158a:	e007      	b.n	800159c <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001590:	f043 0210 	orr.w	r2, r3, #16
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800159c:	7ffb      	ldrb	r3, [r7, #31]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3724      	adds	r7, #36	@ 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd90      	pop	{r4, r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000004 	.word	0x20000004
 80015ac:	053e2d63 	.word	0x053e2d63
 80015b0:	50040000 	.word	0x50040000
 80015b4:	50040100 	.word	0x50040100
 80015b8:	50040200 	.word	0x50040200
 80015bc:	50040300 	.word	0x50040300
 80015c0:	fff0c007 	.word	0xfff0c007

080015c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015d0:	4853      	ldr	r0, [pc, #332]	@ (8001720 <HAL_ADC_Start_DMA+0x15c>)
 80015d2:	f7ff fde5 	bl	80011a0 <LL_ADC_GetMultimode>
 80015d6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fe76 	bl	80012ce <LL_ADC_REG_IsConversionOngoing>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f040 8093 	bne.w	8001710 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d101      	bne.n	80015f8 <HAL_ADC_Start_DMA+0x34>
 80015f4:	2302      	movs	r3, #2
 80015f6:	e08e      	b.n	8001716 <HAL_ADC_Start_DMA+0x152>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a47      	ldr	r2, [pc, #284]	@ (8001724 <HAL_ADC_Start_DMA+0x160>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d008      	beq.n	800161c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	2b05      	cmp	r3, #5
 8001614:	d002      	beq.n	800161c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	2b09      	cmp	r3, #9
 800161a:	d172      	bne.n	8001702 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 fcad 	bl	8001f7c <ADC_Enable>
 8001622:	4603      	mov	r3, r0
 8001624:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d165      	bne.n	80016f8 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001630:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a38      	ldr	r2, [pc, #224]	@ (8001728 <HAL_ADC_Start_DMA+0x164>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d002      	beq.n	8001650 <HAL_ADC_Start_DMA+0x8c>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	e000      	b.n	8001652 <HAL_ADC_Start_DMA+0x8e>
 8001650:	4b36      	ldr	r3, [pc, #216]	@ (800172c <HAL_ADC_Start_DMA+0x168>)
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	4293      	cmp	r3, r2
 8001658:	d002      	beq.n	8001660 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d105      	bne.n	800166c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001664:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001670:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800167c:	f023 0206 	bic.w	r2, r3, #6
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001684:	e002      	b.n	800168c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001690:	4a27      	ldr	r2, [pc, #156]	@ (8001730 <HAL_ADC_Start_DMA+0x16c>)
 8001692:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001698:	4a26      	ldr	r2, [pc, #152]	@ (8001734 <HAL_ADC_Start_DMA+0x170>)
 800169a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016a0:	4a25      	ldr	r2, [pc, #148]	@ (8001738 <HAL_ADC_Start_DMA+0x174>)
 80016a2:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	221c      	movs	r2, #28
 80016aa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0210 	orr.w	r2, r2, #16
 80016c2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0201 	orr.w	r2, r2, #1
 80016d2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	3340      	adds	r3, #64	@ 0x40
 80016de:	4619      	mov	r1, r3
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f001 f804 	bl	80026f0 <HAL_DMA_Start_IT>
 80016e8:	4603      	mov	r3, r0
 80016ea:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fdd8 	bl	80012a6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80016f6:	e00d      	b.n	8001714 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8001700:	e008      	b.n	8001714 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800170e:	e001      	b.n	8001714 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001710:	2302      	movs	r3, #2
 8001712:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001714:	7dfb      	ldrb	r3, [r7, #23]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	50040300 	.word	0x50040300
 8001724:	50040200 	.word	0x50040200
 8001728:	50040100 	.word	0x50040100
 800172c:	50040000 	.word	0x50040000
 8001730:	08002089 	.word	0x08002089
 8001734:	08002161 	.word	0x08002161
 8001738:	0800217d 	.word	0x0800217d

0800173c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b0b6      	sub	sp, #216	@ 0xd8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x22>
 8001782:	2302      	movs	r3, #2
 8001784:	e3e3      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x7ea>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fd9b 	bl	80012ce <LL_ADC_REG_IsConversionOngoing>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	f040 83c4 	bne.w	8001f28 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b05      	cmp	r3, #5
 80017ae:	d824      	bhi.n	80017fa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	3b02      	subs	r3, #2
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d81b      	bhi.n	80017f2 <HAL_ADC_ConfigChannel+0x8e>
 80017ba:	a201      	add	r2, pc, #4	@ (adr r2, 80017c0 <HAL_ADC_ConfigChannel+0x5c>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	080017d1 	.word	0x080017d1
 80017c4:	080017d9 	.word	0x080017d9
 80017c8:	080017e1 	.word	0x080017e1
 80017cc:	080017e9 	.word	0x080017e9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80017d0:	230c      	movs	r3, #12
 80017d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017d6:	e010      	b.n	80017fa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80017d8:	2312      	movs	r3, #18
 80017da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017de:	e00c      	b.n	80017fa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80017e0:	2318      	movs	r3, #24
 80017e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017e6:	e008      	b.n	80017fa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80017e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017f0:	e003      	b.n	80017fa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80017f2:	2306      	movs	r3, #6
 80017f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80017f8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001808:	f7ff fc4f 	bl	80010aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fd5c 	bl	80012ce <LL_ADC_REG_IsConversionOngoing>
 8001816:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fd68 	bl	80012f4 <LL_ADC_INJ_IsConversionOngoing>
 8001824:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001828:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800182c:	2b00      	cmp	r3, #0
 800182e:	f040 81bf 	bne.w	8001bb0 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001832:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001836:	2b00      	cmp	r3, #0
 8001838:	f040 81ba 	bne.w	8001bb0 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001844:	d10f      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2200      	movs	r2, #0
 8001850:	4619      	mov	r1, r3
 8001852:	f7ff fc56 	bl	8001102 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fbfd 	bl	800105e <LL_ADC_SetSamplingTimeCommonConfig>
 8001864:	e00e      	b.n	8001884 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	6819      	ldr	r1, [r3, #0]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	461a      	mov	r2, r3
 8001874:	f7ff fc45 	bl	8001102 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fbed 	bl	800105e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	08db      	lsrs	r3, r3, #3
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d00a      	beq.n	80018bc <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	6919      	ldr	r1, [r3, #16]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80018b6:	f7ff fb7d 	bl	8000fb4 <LL_ADC_SetOffset>
 80018ba:	e179      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fb9a 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10a      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x184>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fb8f 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	0e9b      	lsrs	r3, r3, #26
 80018e2:	f003 021f 	and.w	r2, r3, #31
 80018e6:	e01e      	b.n	8001926 <HAL_ADC_ConfigChannel+0x1c2>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fb84 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001906:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800190a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800190e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001916:	2320      	movs	r3, #32
 8001918:	e004      	b.n	8001924 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800191a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800191e:	fab3 f383 	clz	r3, r3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800192e:	2b00      	cmp	r3, #0
 8001930:	d105      	bne.n	800193e <HAL_ADC_ConfigChannel+0x1da>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0e9b      	lsrs	r3, r3, #26
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	e018      	b.n	8001970 <HAL_ADC_ConfigChannel+0x20c>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800194a:	fa93 f3a3 	rbit	r3, r3
 800194e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001952:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001956:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800195a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001962:	2320      	movs	r3, #32
 8001964:	e004      	b.n	8001970 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001966:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800196a:	fab3 f383 	clz	r3, r3
 800196e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001970:	429a      	cmp	r2, r3
 8001972:	d106      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2200      	movs	r2, #0
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fb53 	bl	8001028 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2101      	movs	r1, #1
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fb37 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10a      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x24a>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2101      	movs	r1, #1
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fb2c 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	0e9b      	lsrs	r3, r3, #26
 80019a8:	f003 021f 	and.w	r2, r3, #31
 80019ac:	e01e      	b.n	80019ec <HAL_ADC_ConfigChannel+0x288>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2101      	movs	r1, #1
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fb21 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80019cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80019d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80019dc:	2320      	movs	r3, #32
 80019de:	e004      	b.n	80019ea <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80019e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d105      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x2a0>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	0e9b      	lsrs	r3, r3, #26
 80019fe:	f003 031f 	and.w	r3, r3, #31
 8001a02:	e018      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x2d2>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a10:	fa93 f3a3 	rbit	r3, r3
 8001a14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001a18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001a28:	2320      	movs	r3, #32
 8001a2a:	e004      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a30:	fab3 f383 	clz	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d106      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2101      	movs	r1, #1
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff faf0 	bl	8001028 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fad4 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10a      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x310>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2102      	movs	r1, #2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fac9 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	0e9b      	lsrs	r3, r3, #26
 8001a6e:	f003 021f 	and.w	r2, r3, #31
 8001a72:	e01e      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x34e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2102      	movs	r1, #2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fabe 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001a92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001aa2:	2320      	movs	r3, #32
 8001aa4:	e004      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d105      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x366>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0e9b      	lsrs	r3, r3, #26
 8001ac4:	f003 031f 	and.w	r3, r3, #31
 8001ac8:	e014      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x390>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001ad8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ada:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001ade:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001ae6:	2320      	movs	r3, #32
 8001ae8:	e004      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001aea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d106      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2200      	movs	r2, #0
 8001afe:	2102      	movs	r1, #2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fa91 	bl	8001028 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2103      	movs	r1, #3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fa75 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10a      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x3ce>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2103      	movs	r1, #3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fa6a 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	0e9b      	lsrs	r3, r3, #26
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	e017      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x3fe>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2103      	movs	r1, #3
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fa5f 	bl	8000ffc <LL_ADC_GetOffsetChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001b4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b4c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001b4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001b54:	2320      	movs	r3, #32
 8001b56:	e003      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001b58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d105      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x416>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	0e9b      	lsrs	r3, r3, #26
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	e011      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x43a>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001b88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b8a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001b8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001b92:	2320      	movs	r3, #32
 8001b94:	e003      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001b96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b98:	fab3 f383 	clz	r3, r3
 8001b9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d106      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2103      	movs	r1, #3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fa3c 	bl	8001028 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fb63 	bl	8001280 <LL_ADC_IsEnabled>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f040 813f 	bne.w	8001e40 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6819      	ldr	r1, [r3, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f7ff fac2 	bl	8001158 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4a8e      	ldr	r2, [pc, #568]	@ (8001e14 <HAL_ADC_ConfigChannel+0x6b0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	f040 8130 	bne.w	8001e40 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10b      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x4a4>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	0e9b      	lsrs	r3, r3, #26
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	2b09      	cmp	r3, #9
 8001bfe:	bf94      	ite	ls
 8001c00:	2301      	movls	r3, #1
 8001c02:	2300      	movhi	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	e019      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x4d8>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001c1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001c20:	2320      	movs	r3, #32
 8001c22:	e003      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001c24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	2b09      	cmp	r3, #9
 8001c34:	bf94      	ite	ls
 8001c36:	2301      	movls	r3, #1
 8001c38:	2300      	movhi	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d079      	beq.n	8001d34 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d107      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x4f8>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0e9b      	lsrs	r3, r3, #26
 8001c52:	3301      	adds	r3, #1
 8001c54:	069b      	lsls	r3, r3, #26
 8001c56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c5a:	e015      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x524>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c6c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001c6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001c74:	2320      	movs	r3, #32
 8001c76:	e003      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	3301      	adds	r3, #1
 8001c82:	069b      	lsls	r3, r3, #26
 8001c84:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d109      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x544>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	0e9b      	lsrs	r3, r3, #26
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	e017      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x574>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cb0:	fa93 f3a3 	rbit	r3, r3
 8001cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cb8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001cc0:	2320      	movs	r3, #32
 8001cc2:	e003      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	ea42 0103 	orr.w	r1, r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10a      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x59a>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0e9b      	lsrs	r3, r3, #26
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f003 021f 	and.w	r2, r3, #31
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	051b      	lsls	r3, r3, #20
 8001cfc:	e018      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x5cc>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001d16:	2320      	movs	r3, #32
 8001d18:	e003      	b.n	8001d22 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d1c:	fab3 f383 	clz	r3, r3
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	3301      	adds	r3, #1
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d30:	430b      	orrs	r3, r1
 8001d32:	e080      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d107      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x5ec>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	0e9b      	lsrs	r3, r3, #26
 8001d46:	3301      	adds	r3, #1
 8001d48:	069b      	lsls	r3, r3, #26
 8001d4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d4e:	e015      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x618>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001d68:	2320      	movs	r3, #32
 8001d6a:	e003      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	3301      	adds	r3, #1
 8001d76:	069b      	lsls	r3, r3, #26
 8001d78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d109      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x638>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0e9b      	lsrs	r3, r3, #26
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	2101      	movs	r1, #1
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	e017      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x668>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	61bb      	str	r3, [r7, #24]
  return result;
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001db4:	2320      	movs	r3, #32
 8001db6:	e003      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	fab3 f383 	clz	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	ea42 0103 	orr.w	r1, r2, r3
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10d      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x694>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	3301      	adds	r3, #1
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	3b1e      	subs	r3, #30
 8001df0:	051b      	lsls	r3, r3, #20
 8001df2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001df6:	e01d      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x6d0>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	60fb      	str	r3, [r7, #12]
  return result;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d103      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001e10:	2320      	movs	r3, #32
 8001e12:	e005      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x6bc>
 8001e14:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	3301      	adds	r3, #1
 8001e22:	f003 021f 	and.w	r2, r3, #31
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3b1e      	subs	r3, #30
 8001e2e:	051b      	lsls	r3, r3, #20
 8001e30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e34:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7ff f961 	bl	8001102 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b44      	ldr	r3, [pc, #272]	@ (8001f58 <HAL_ADC_ConfigChannel+0x7f4>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d07a      	beq.n	8001f42 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e4c:	4843      	ldr	r0, [pc, #268]	@ (8001f5c <HAL_ADC_ConfigChannel+0x7f8>)
 8001e4e:	f7ff f8a3 	bl	8000f98 <LL_ADC_GetCommonPathInternalCh>
 8001e52:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a41      	ldr	r2, [pc, #260]	@ (8001f60 <HAL_ADC_ConfigChannel+0x7fc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d12c      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d126      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a3c      	ldr	r2, [pc, #240]	@ (8001f64 <HAL_ADC_ConfigChannel+0x800>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d004      	beq.n	8001e80 <HAL_ADC_ConfigChannel+0x71c>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a3b      	ldr	r2, [pc, #236]	@ (8001f68 <HAL_ADC_ConfigChannel+0x804>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d15d      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4834      	ldr	r0, [pc, #208]	@ (8001f5c <HAL_ADC_ConfigChannel+0x7f8>)
 8001e8c:	f7ff f871 	bl	8000f72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e90:	4b36      	ldr	r3, [pc, #216]	@ (8001f6c <HAL_ADC_ConfigChannel+0x808>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	099b      	lsrs	r3, r3, #6
 8001e96:	4a36      	ldr	r2, [pc, #216]	@ (8001f70 <HAL_ADC_ConfigChannel+0x80c>)
 8001e98:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001eaa:	e002      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f9      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001eb8:	e040      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a2d      	ldr	r2, [pc, #180]	@ (8001f74 <HAL_ADC_ConfigChannel+0x810>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d118      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ec4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ec8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d112      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a23      	ldr	r2, [pc, #140]	@ (8001f64 <HAL_ADC_ConfigChannel+0x800>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d004      	beq.n	8001ee4 <HAL_ADC_ConfigChannel+0x780>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a22      	ldr	r2, [pc, #136]	@ (8001f68 <HAL_ADC_ConfigChannel+0x804>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d12d      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ee4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ee8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eec:	4619      	mov	r1, r3
 8001eee:	481b      	ldr	r0, [pc, #108]	@ (8001f5c <HAL_ADC_ConfigChannel+0x7f8>)
 8001ef0:	f7ff f83f 	bl	8000f72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ef4:	e024      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1f      	ldr	r2, [pc, #124]	@ (8001f78 <HAL_ADC_ConfigChannel+0x814>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d120      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d11a      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a14      	ldr	r2, [pc, #80]	@ (8001f64 <HAL_ADC_ConfigChannel+0x800>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d115      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f1e:	4619      	mov	r1, r3
 8001f20:	480e      	ldr	r0, [pc, #56]	@ (8001f5c <HAL_ADC_ConfigChannel+0x7f8>)
 8001f22:	f7ff f826 	bl	8000f72 <LL_ADC_SetCommonPathInternalCh>
 8001f26:	e00c      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2c:	f043 0220 	orr.w	r2, r3, #32
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001f3a:	e002      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f3c:	bf00      	nop
 8001f3e:	e000      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f4a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	37d8      	adds	r7, #216	@ 0xd8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	80080000 	.word	0x80080000
 8001f5c:	50040300 	.word	0x50040300
 8001f60:	c7520000 	.word	0xc7520000
 8001f64:	50040000 	.word	0x50040000
 8001f68:	50040200 	.word	0x50040200
 8001f6c:	20000004 	.word	0x20000004
 8001f70:	053e2d63 	.word	0x053e2d63
 8001f74:	cb840000 	.word	0xcb840000
 8001f78:	80000001 	.word	0x80000001

08001f7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff f977 	bl	8001280 <LL_ADC_IsEnabled>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d169      	bne.n	800206c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <ADC_Enable+0xfc>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00d      	beq.n	8001fc2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	f043 0210 	orr.w	r2, r3, #16
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb6:	f043 0201 	orr.w	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e055      	b.n	800206e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff f946 	bl	8001258 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001fcc:	482b      	ldr	r0, [pc, #172]	@ (800207c <ADC_Enable+0x100>)
 8001fce:	f7fe ffe3 	bl	8000f98 <LL_ADC_GetCommonPathInternalCh>
 8001fd2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001fd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d013      	beq.n	8002004 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fdc:	4b28      	ldr	r3, [pc, #160]	@ (8002080 <ADC_Enable+0x104>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	099b      	lsrs	r3, r3, #6
 8001fe2:	4a28      	ldr	r2, [pc, #160]	@ (8002084 <ADC_Enable+0x108>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	099b      	lsrs	r3, r3, #6
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ff6:	e002      	b.n	8001ffe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f9      	bne.n	8001ff8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002004:	f7fe ff72 	bl	8000eec <HAL_GetTick>
 8002008:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800200a:	e028      	b.n	800205e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff f935 	bl	8001280 <LL_ADC_IsEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d104      	bne.n	8002026 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff f919 	bl	8001258 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002026:	f7fe ff61 	bl	8000eec <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d914      	bls.n	800205e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b01      	cmp	r3, #1
 8002040:	d00d      	beq.n	800205e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002046:	f043 0210 	orr.w	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002052:	f043 0201 	orr.w	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e007      	b.n	800206e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d1cf      	bne.n	800200c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	8000003f 	.word	0x8000003f
 800207c:	50040300 	.word	0x50040300
 8002080:	20000004 	.word	0x20000004
 8002084:	053e2d63 	.word	0x053e2d63

08002088 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002094:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d14b      	bne.n	800213a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d021      	beq.n	8002100 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe ffdf 	bl	8001084 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d032      	beq.n	8002132 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d12b      	bne.n	8002132 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d11f      	bne.n	8002132 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f6:	f043 0201 	orr.w	r2, r3, #1
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80020fe:	e018      	b.n	8002132 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d111      	bne.n	8002132 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d105      	bne.n	8002132 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212a:	f043 0201 	orr.w	r2, r3, #1
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f7fe fa2c 	bl	8000590 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002138:	e00e      	b.n	8002158 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f7ff fb02 	bl	8001750 <HAL_ADC_ErrorCallback>
}
 800214c:	e004      	b.n	8002158 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f7ff fae4 	bl	800173c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002188:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219a:	f043 0204 	orr.w	r2, r3, #4
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7ff fad4 	bl	8001750 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <LL_ADC_IsEnabled>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <LL_ADC_IsEnabled+0x18>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <LL_ADC_IsEnabled+0x1a>
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d101      	bne.n	80021ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b0a1      	sub	sp, #132	@ 0x84
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002216:	2302      	movs	r3, #2
 8002218:	e093      	b.n	8002342 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002222:	2300      	movs	r3, #0
 8002224:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002226:	2300      	movs	r3, #0
 8002228:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a47      	ldr	r2, [pc, #284]	@ (800234c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d102      	bne.n	800223a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002234:	4b46      	ldr	r3, [pc, #280]	@ (8002350 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e001      	b.n	800223e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10b      	bne.n	800225c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002248:	f043 0220 	orr.w	r2, r3, #32
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e072      	b.n	8002342 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ffb9 	bl	80021d6 <LL_ADC_REG_IsConversionOngoing>
 8002264:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff ffb3 	bl	80021d6 <LL_ADC_REG_IsConversionOngoing>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d154      	bne.n	8002320 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002276:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002278:	2b00      	cmp	r3, #0
 800227a:	d151      	bne.n	8002320 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800227c:	4b35      	ldr	r3, [pc, #212]	@ (8002354 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800227e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d02c      	beq.n	80022e2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002288:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800229a:	035b      	lsls	r3, r3, #13
 800229c:	430b      	orrs	r3, r1
 800229e:	431a      	orrs	r2, r3
 80022a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022a4:	4829      	ldr	r0, [pc, #164]	@ (800234c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80022a6:	f7ff ff83 	bl	80021b0 <LL_ADC_IsEnabled>
 80022aa:	4604      	mov	r4, r0
 80022ac:	4828      	ldr	r0, [pc, #160]	@ (8002350 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022ae:	f7ff ff7f 	bl	80021b0 <LL_ADC_IsEnabled>
 80022b2:	4603      	mov	r3, r0
 80022b4:	431c      	orrs	r4, r3
 80022b6:	4828      	ldr	r0, [pc, #160]	@ (8002358 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80022b8:	f7ff ff7a 	bl	80021b0 <LL_ADC_IsEnabled>
 80022bc:	4603      	mov	r3, r0
 80022be:	4323      	orrs	r3, r4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d137      	bne.n	8002334 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80022c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80022cc:	f023 030f 	bic.w	r3, r3, #15
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	6811      	ldr	r1, [r2, #0]
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	6892      	ldr	r2, [r2, #8]
 80022d8:	430a      	orrs	r2, r1
 80022da:	431a      	orrs	r2, r3
 80022dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022de:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80022e0:	e028      	b.n	8002334 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022ec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022ee:	4817      	ldr	r0, [pc, #92]	@ (800234c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80022f0:	f7ff ff5e 	bl	80021b0 <LL_ADC_IsEnabled>
 80022f4:	4604      	mov	r4, r0
 80022f6:	4816      	ldr	r0, [pc, #88]	@ (8002350 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022f8:	f7ff ff5a 	bl	80021b0 <LL_ADC_IsEnabled>
 80022fc:	4603      	mov	r3, r0
 80022fe:	431c      	orrs	r4, r3
 8002300:	4815      	ldr	r0, [pc, #84]	@ (8002358 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002302:	f7ff ff55 	bl	80021b0 <LL_ADC_IsEnabled>
 8002306:	4603      	mov	r3, r0
 8002308:	4323      	orrs	r3, r4
 800230a:	2b00      	cmp	r3, #0
 800230c:	d112      	bne.n	8002334 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800230e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002316:	f023 030f 	bic.w	r3, r3, #15
 800231a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800231c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800231e:	e009      	b.n	8002334 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002324:	f043 0220 	orr.w	r2, r3, #32
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002332:	e000      	b.n	8002336 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002334:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800233e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002342:	4618      	mov	r0, r3
 8002344:	3784      	adds	r7, #132	@ 0x84
 8002346:	46bd      	mov	sp, r7
 8002348:	bd90      	pop	{r4, r7, pc}
 800234a:	bf00      	nop
 800234c:	50040000 	.word	0x50040000
 8002350:	50040100 	.word	0x50040100
 8002354:	50040300 	.word	0x50040300
 8002358:	50040200 	.word	0x50040200

0800235c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800236c:	4b0c      	ldr	r3, [pc, #48]	@ (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002378:	4013      	ands	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002384:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800238c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238e:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	60d3      	str	r3, [r2, #12]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a8:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <__NVIC_GetPriorityGrouping+0x18>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	f003 0307 	and.w	r3, r3, #7
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	db0b      	blt.n	80023ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	4907      	ldr	r1, [pc, #28]	@ (80023f8 <__NVIC_EnableIRQ+0x38>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	2001      	movs	r0, #1
 80023e2:	fa00 f202 	lsl.w	r2, r0, r2
 80023e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000e100 	.word	0xe000e100

080023fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	6039      	str	r1, [r7, #0]
 8002406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	2b00      	cmp	r3, #0
 800240e:	db0a      	blt.n	8002426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	b2da      	uxtb	r2, r3
 8002414:	490c      	ldr	r1, [pc, #48]	@ (8002448 <__NVIC_SetPriority+0x4c>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	0112      	lsls	r2, r2, #4
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	440b      	add	r3, r1
 8002420:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002424:	e00a      	b.n	800243c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4908      	ldr	r1, [pc, #32]	@ (800244c <__NVIC_SetPriority+0x50>)
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	3b04      	subs	r3, #4
 8002434:	0112      	lsls	r2, r2, #4
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	440b      	add	r3, r1
 800243a:	761a      	strb	r2, [r3, #24]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000e100 	.word	0xe000e100
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002450:	b480      	push	{r7}
 8002452:	b089      	sub	sp, #36	@ 0x24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f1c3 0307 	rsb	r3, r3, #7
 800246a:	2b04      	cmp	r3, #4
 800246c:	bf28      	it	cs
 800246e:	2304      	movcs	r3, #4
 8002470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3304      	adds	r3, #4
 8002476:	2b06      	cmp	r3, #6
 8002478:	d902      	bls.n	8002480 <NVIC_EncodePriority+0x30>
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3b03      	subs	r3, #3
 800247e:	e000      	b.n	8002482 <NVIC_EncodePriority+0x32>
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	f04f 32ff 	mov.w	r2, #4294967295
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43da      	mvns	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	401a      	ands	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002498:	f04f 31ff 	mov.w	r1, #4294967295
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	43d9      	mvns	r1, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	4313      	orrs	r3, r2
         );
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3724      	adds	r7, #36	@ 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024c8:	d301      	bcc.n	80024ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ca:	2301      	movs	r3, #1
 80024cc:	e00f      	b.n	80024ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ce:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <SysTick_Config+0x40>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024d6:	210f      	movs	r1, #15
 80024d8:	f04f 30ff 	mov.w	r0, #4294967295
 80024dc:	f7ff ff8e 	bl	80023fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e0:	4b05      	ldr	r3, [pc, #20]	@ (80024f8 <SysTick_Config+0x40>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e6:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <SysTick_Config+0x40>)
 80024e8:	2207      	movs	r2, #7
 80024ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	e000e010 	.word	0xe000e010

080024fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ff29 	bl	800235c <__NVIC_SetPriorityGrouping>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b086      	sub	sp, #24
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002524:	f7ff ff3e 	bl	80023a4 <__NVIC_GetPriorityGrouping>
 8002528:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	6978      	ldr	r0, [r7, #20]
 8002530:	f7ff ff8e 	bl	8002450 <NVIC_EncodePriority>
 8002534:	4602      	mov	r2, r0
 8002536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff5d 	bl	80023fc <__NVIC_SetPriority>
}
 8002542:	bf00      	nop
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff31 	bl	80023c0 <__NVIC_EnableIRQ>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ffa2 	bl	80024b8 <SysTick_Config>
 8002574:	4603      	mov	r3, r0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e098      	b.n	80026c4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	4b4d      	ldr	r3, [pc, #308]	@ (80026d0 <HAL_DMA_Init+0x150>)
 800259a:	429a      	cmp	r2, r3
 800259c:	d80f      	bhi.n	80025be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	4b4b      	ldr	r3, [pc, #300]	@ (80026d4 <HAL_DMA_Init+0x154>)
 80025a6:	4413      	add	r3, r2
 80025a8:	4a4b      	ldr	r2, [pc, #300]	@ (80026d8 <HAL_DMA_Init+0x158>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	009a      	lsls	r2, r3, #2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a48      	ldr	r2, [pc, #288]	@ (80026dc <HAL_DMA_Init+0x15c>)
 80025ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80025bc:	e00e      	b.n	80025dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	4b46      	ldr	r3, [pc, #280]	@ (80026e0 <HAL_DMA_Init+0x160>)
 80025c6:	4413      	add	r3, r2
 80025c8:	4a43      	ldr	r2, [pc, #268]	@ (80026d8 <HAL_DMA_Init+0x158>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	009a      	lsls	r2, r3, #2
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a42      	ldr	r2, [pc, #264]	@ (80026e4 <HAL_DMA_Init+0x164>)
 80025da:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2202      	movs	r2, #2
 80025e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80025f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002636:	d039      	beq.n	80026ac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	4a27      	ldr	r2, [pc, #156]	@ (80026dc <HAL_DMA_Init+0x15c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d11a      	bne.n	8002678 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002642:	4b29      	ldr	r3, [pc, #164]	@ (80026e8 <HAL_DMA_Init+0x168>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264a:	f003 031c 	and.w	r3, r3, #28
 800264e:	210f      	movs	r1, #15
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	4924      	ldr	r1, [pc, #144]	@ (80026e8 <HAL_DMA_Init+0x168>)
 8002658:	4013      	ands	r3, r2
 800265a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800265c:	4b22      	ldr	r3, [pc, #136]	@ (80026e8 <HAL_DMA_Init+0x168>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002668:	f003 031c 	and.w	r3, r3, #28
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	491d      	ldr	r1, [pc, #116]	@ (80026e8 <HAL_DMA_Init+0x168>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
 8002676:	e019      	b.n	80026ac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002678:	4b1c      	ldr	r3, [pc, #112]	@ (80026ec <HAL_DMA_Init+0x16c>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002680:	f003 031c 	and.w	r3, r3, #28
 8002684:	210f      	movs	r1, #15
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	4917      	ldr	r1, [pc, #92]	@ (80026ec <HAL_DMA_Init+0x16c>)
 800268e:	4013      	ands	r3, r2
 8002690:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002692:	4b16      	ldr	r3, [pc, #88]	@ (80026ec <HAL_DMA_Init+0x16c>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6859      	ldr	r1, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	f003 031c 	and.w	r3, r3, #28
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	4911      	ldr	r1, [pc, #68]	@ (80026ec <HAL_DMA_Init+0x16c>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40020407 	.word	0x40020407
 80026d4:	bffdfff8 	.word	0xbffdfff8
 80026d8:	cccccccd 	.word	0xcccccccd
 80026dc:	40020000 	.word	0x40020000
 80026e0:	bffdfbf8 	.word	0xbffdfbf8
 80026e4:	40020400 	.word	0x40020400
 80026e8:	400200a8 	.word	0x400200a8
 80026ec:	400204a8 	.word	0x400204a8

080026f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_DMA_Start_IT+0x20>
 800270c:	2302      	movs	r3, #2
 800270e:	e04b      	b.n	80027a8 <HAL_DMA_Start_IT+0xb8>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d13a      	bne.n	800279a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0201 	bic.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f8e0 	bl	800290e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	2b00      	cmp	r3, #0
 8002754:	d008      	beq.n	8002768 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 020e 	orr.w	r2, r2, #14
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	e00f      	b.n	8002788 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0204 	bic.w	r2, r2, #4
 8002776:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 020a 	orr.w	r2, r2, #10
 8002786:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e005      	b.n	80027a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80027a2:	2302      	movs	r3, #2
 80027a4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027cc:	f003 031c 	and.w	r3, r3, #28
 80027d0:	2204      	movs	r2, #4
 80027d2:	409a      	lsls	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d026      	beq.n	800282a <HAL_DMA_IRQHandler+0x7a>
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d021      	beq.n	800282a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d107      	bne.n	8002804 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0204 	bic.w	r2, r2, #4
 8002802:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002808:	f003 021c 	and.w	r2, r3, #28
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002810:	2104      	movs	r1, #4
 8002812:	fa01 f202 	lsl.w	r2, r1, r2
 8002816:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281c:	2b00      	cmp	r3, #0
 800281e:	d071      	beq.n	8002904 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002828:	e06c      	b.n	8002904 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282e:	f003 031c 	and.w	r3, r3, #28
 8002832:	2202      	movs	r2, #2
 8002834:	409a      	lsls	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d02e      	beq.n	800289c <HAL_DMA_IRQHandler+0xec>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d029      	beq.n	800289c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10b      	bne.n	800286e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 020a 	bic.w	r2, r2, #10
 8002864:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	f003 021c 	and.w	r2, r3, #28
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	2102      	movs	r1, #2
 800287c:	fa01 f202 	lsl.w	r2, r1, r2
 8002880:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d038      	beq.n	8002904 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800289a:	e033      	b.n	8002904 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a0:	f003 031c 	and.w	r3, r3, #28
 80028a4:	2208      	movs	r2, #8
 80028a6:	409a      	lsls	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d02a      	beq.n	8002906 <HAL_DMA_IRQHandler+0x156>
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d025      	beq.n	8002906 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 020e 	bic.w	r2, r2, #14
 80028c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	f003 021c 	and.w	r2, r3, #28
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	2101      	movs	r1, #1
 80028d8:	fa01 f202 	lsl.w	r2, r1, r2
 80028dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d004      	beq.n	8002906 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002904:	bf00      	nop
 8002906:	bf00      	nop
}
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800290e:	b480      	push	{r7}
 8002910:	b085      	sub	sp, #20
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002920:	f003 021c 	and.w	r2, r3, #28
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	2101      	movs	r1, #1
 800292a:	fa01 f202 	lsl.w	r2, r1, r2
 800292e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b10      	cmp	r3, #16
 800293e:	d108      	bne.n	8002952 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002950:	e007      	b.n	8002962 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	60da      	str	r2, [r3, #12]
}
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297e:	e166      	b.n	8002c4e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	2101      	movs	r1, #1
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	fa01 f303 	lsl.w	r3, r1, r3
 800298c:	4013      	ands	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8158 	beq.w	8002c48 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d005      	beq.n	80029b0 <HAL_GPIO_Init+0x40>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d130      	bne.n	8002a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	2203      	movs	r2, #3
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029e6:	2201      	movs	r2, #1
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4013      	ands	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	091b      	lsrs	r3, r3, #4
 80029fc:	f003 0201 	and.w	r2, r3, #1
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d017      	beq.n	8002a4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	2203      	movs	r2, #3
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4013      	ands	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d123      	bne.n	8002aa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	08da      	lsrs	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3208      	adds	r2, #8
 8002a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	220f      	movs	r2, #15
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	691a      	ldr	r2, [r3, #16]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	08da      	lsrs	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3208      	adds	r2, #8
 8002a9c:	6939      	ldr	r1, [r7, #16]
 8002a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	2203      	movs	r2, #3
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0203 	and.w	r2, r3, #3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 80b2 	beq.w	8002c48 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae4:	4b61      	ldr	r3, [pc, #388]	@ (8002c6c <HAL_GPIO_Init+0x2fc>)
 8002ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae8:	4a60      	ldr	r2, [pc, #384]	@ (8002c6c <HAL_GPIO_Init+0x2fc>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6613      	str	r3, [r2, #96]	@ 0x60
 8002af0:	4b5e      	ldr	r3, [pc, #376]	@ (8002c6c <HAL_GPIO_Init+0x2fc>)
 8002af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002afc:	4a5c      	ldr	r2, [pc, #368]	@ (8002c70 <HAL_GPIO_Init+0x300>)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	089b      	lsrs	r3, r3, #2
 8002b02:	3302      	adds	r3, #2
 8002b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	220f      	movs	r2, #15
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b26:	d02b      	beq.n	8002b80 <HAL_GPIO_Init+0x210>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a52      	ldr	r2, [pc, #328]	@ (8002c74 <HAL_GPIO_Init+0x304>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d025      	beq.n	8002b7c <HAL_GPIO_Init+0x20c>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a51      	ldr	r2, [pc, #324]	@ (8002c78 <HAL_GPIO_Init+0x308>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d01f      	beq.n	8002b78 <HAL_GPIO_Init+0x208>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a50      	ldr	r2, [pc, #320]	@ (8002c7c <HAL_GPIO_Init+0x30c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d019      	beq.n	8002b74 <HAL_GPIO_Init+0x204>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a4f      	ldr	r2, [pc, #316]	@ (8002c80 <HAL_GPIO_Init+0x310>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d013      	beq.n	8002b70 <HAL_GPIO_Init+0x200>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a4e      	ldr	r2, [pc, #312]	@ (8002c84 <HAL_GPIO_Init+0x314>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d00d      	beq.n	8002b6c <HAL_GPIO_Init+0x1fc>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a4d      	ldr	r2, [pc, #308]	@ (8002c88 <HAL_GPIO_Init+0x318>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d007      	beq.n	8002b68 <HAL_GPIO_Init+0x1f8>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a4c      	ldr	r2, [pc, #304]	@ (8002c8c <HAL_GPIO_Init+0x31c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d101      	bne.n	8002b64 <HAL_GPIO_Init+0x1f4>
 8002b60:	2307      	movs	r3, #7
 8002b62:	e00e      	b.n	8002b82 <HAL_GPIO_Init+0x212>
 8002b64:	2308      	movs	r3, #8
 8002b66:	e00c      	b.n	8002b82 <HAL_GPIO_Init+0x212>
 8002b68:	2306      	movs	r3, #6
 8002b6a:	e00a      	b.n	8002b82 <HAL_GPIO_Init+0x212>
 8002b6c:	2305      	movs	r3, #5
 8002b6e:	e008      	b.n	8002b82 <HAL_GPIO_Init+0x212>
 8002b70:	2304      	movs	r3, #4
 8002b72:	e006      	b.n	8002b82 <HAL_GPIO_Init+0x212>
 8002b74:	2303      	movs	r3, #3
 8002b76:	e004      	b.n	8002b82 <HAL_GPIO_Init+0x212>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e002      	b.n	8002b82 <HAL_GPIO_Init+0x212>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <HAL_GPIO_Init+0x212>
 8002b80:	2300      	movs	r3, #0
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	f002 0203 	and.w	r2, r2, #3
 8002b88:	0092      	lsls	r2, r2, #2
 8002b8a:	4093      	lsls	r3, r2
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b92:	4937      	ldr	r1, [pc, #220]	@ (8002c70 <HAL_GPIO_Init+0x300>)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	3302      	adds	r3, #2
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8002c90 <HAL_GPIO_Init+0x320>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bc4:	4a32      	ldr	r2, [pc, #200]	@ (8002c90 <HAL_GPIO_Init+0x320>)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bca:	4b31      	ldr	r3, [pc, #196]	@ (8002c90 <HAL_GPIO_Init+0x320>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bee:	4a28      	ldr	r2, [pc, #160]	@ (8002c90 <HAL_GPIO_Init+0x320>)
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002bf4:	4b26      	ldr	r3, [pc, #152]	@ (8002c90 <HAL_GPIO_Init+0x320>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4013      	ands	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c18:	4a1d      	ldr	r2, [pc, #116]	@ (8002c90 <HAL_GPIO_Init+0x320>)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c90 <HAL_GPIO_Init+0x320>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c42:	4a13      	ldr	r2, [pc, #76]	@ (8002c90 <HAL_GPIO_Init+0x320>)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f47f ae91 	bne.w	8002980 <HAL_GPIO_Init+0x10>
  }
}
 8002c5e:	bf00      	nop
 8002c60:	bf00      	nop
 8002c62:	371c      	adds	r7, #28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40010000 	.word	0x40010000
 8002c74:	48000400 	.word	0x48000400
 8002c78:	48000800 	.word	0x48000800
 8002c7c:	48000c00 	.word	0x48000c00
 8002c80:	48001000 	.word	0x48001000
 8002c84:	48001400 	.word	0x48001400
 8002c88:	48001800 	.word	0x48001800
 8002c8c:	48001c00 	.word	0x48001c00
 8002c90:	40010400 	.word	0x40010400

08002c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	807b      	strh	r3, [r7, #2]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ca4:	787b      	ldrb	r3, [r7, #1]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002caa:	887a      	ldrh	r2, [r7, #2]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cb0:	e002      	b.n	8002cb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cb2:	887a      	ldrh	r2, [r7, #2]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cc8:	4b04      	ldr	r3, [pc, #16]	@ (8002cdc <HAL_PWREx_GetVoltageRange+0x18>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40007000 	.word	0x40007000

08002ce0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cee:	d130      	bne.n	8002d52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf0:	4b23      	ldr	r3, [pc, #140]	@ (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cfc:	d038      	beq.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cfe:	4b20      	ldr	r3, [pc, #128]	@ (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d06:	4a1e      	ldr	r2, [pc, #120]	@ (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2232      	movs	r2, #50	@ 0x32
 8002d14:	fb02 f303 	mul.w	r3, r2, r3
 8002d18:	4a1b      	ldr	r2, [pc, #108]	@ (8002d88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	0c9b      	lsrs	r3, r3, #18
 8002d20:	3301      	adds	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d24:	e002      	b.n	8002d2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d2c:	4b14      	ldr	r3, [pc, #80]	@ (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d38:	d102      	bne.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1f2      	bne.n	8002d26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d40:	4b0f      	ldr	r3, [pc, #60]	@ (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d4c:	d110      	bne.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e00f      	b.n	8002d72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d52:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d5e:	d007      	beq.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d60:	4b07      	ldr	r3, [pc, #28]	@ (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d68:	4a05      	ldr	r2, [pc, #20]	@ (8002d80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40007000 	.word	0x40007000
 8002d84:	20000004 	.word	0x20000004
 8002d88:	431bde83 	.word	0x431bde83

08002d8c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002d90:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a04      	ldr	r2, [pc, #16]	@ (8002da8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d9a:	6053      	str	r3, [r2, #4]
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40007000 	.word	0x40007000

08002dac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	f000 bc08 	b.w	80035d0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc0:	4b96      	ldr	r3, [pc, #600]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dca:	4b94      	ldr	r3, [pc, #592]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80e4 	beq.w	8002faa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d007      	beq.n	8002df8 <HAL_RCC_OscConfig+0x4c>
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	f040 808b 	bne.w	8002f06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	f040 8087 	bne.w	8002f06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002df8:	4b88      	ldr	r3, [pc, #544]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_OscConfig+0x64>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e3df      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1a      	ldr	r2, [r3, #32]
 8002e14:	4b81      	ldr	r3, [pc, #516]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d004      	beq.n	8002e2a <HAL_RCC_OscConfig+0x7e>
 8002e20:	4b7e      	ldr	r3, [pc, #504]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e28:	e005      	b.n	8002e36 <HAL_RCC_OscConfig+0x8a>
 8002e2a:	4b7c      	ldr	r3, [pc, #496]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d223      	bcs.n	8002e82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fd92 	bl	8003968 <RCC_SetFlashLatencyFromMSIRange>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e3c0      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e4e:	4b73      	ldr	r3, [pc, #460]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a72      	ldr	r2, [pc, #456]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002e54:	f043 0308 	orr.w	r3, r3, #8
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b70      	ldr	r3, [pc, #448]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	496d      	ldr	r1, [pc, #436]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e6c:	4b6b      	ldr	r3, [pc, #428]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	4968      	ldr	r1, [pc, #416]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
 8002e80:	e025      	b.n	8002ece <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e82:	4b66      	ldr	r3, [pc, #408]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a65      	ldr	r2, [pc, #404]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002e88:	f043 0308 	orr.w	r3, r3, #8
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	4b63      	ldr	r3, [pc, #396]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	4960      	ldr	r1, [pc, #384]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ea0:	4b5e      	ldr	r3, [pc, #376]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	495b      	ldr	r1, [pc, #364]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fd52 	bl	8003968 <RCC_SetFlashLatencyFromMSIRange>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e380      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ece:	f000 fc87 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	4b51      	ldr	r3, [pc, #324]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	4950      	ldr	r1, [pc, #320]	@ (8003020 <HAL_RCC_OscConfig+0x274>)
 8002ee0:	5ccb      	ldrb	r3, [r1, r3]
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eea:	4a4e      	ldr	r2, [pc, #312]	@ (8003024 <HAL_RCC_OscConfig+0x278>)
 8002eec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002eee:	4b4e      	ldr	r3, [pc, #312]	@ (8003028 <HAL_RCC_OscConfig+0x27c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fd ffaa 	bl	8000e4c <HAL_InitTick>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d052      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	e364      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d032      	beq.n	8002f74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f0e:	4b43      	ldr	r3, [pc, #268]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a42      	ldr	r2, [pc, #264]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f1a:	f7fd ffe7 	bl	8000eec <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f22:	f7fd ffe3 	bl	8000eec <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e34d      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f34:	4b39      	ldr	r3, [pc, #228]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f40:	4b36      	ldr	r3, [pc, #216]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a35      	ldr	r2, [pc, #212]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002f46:	f043 0308 	orr.w	r3, r3, #8
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	4b33      	ldr	r3, [pc, #204]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4930      	ldr	r1, [pc, #192]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	021b      	lsls	r3, r3, #8
 8002f6c:	492b      	ldr	r1, [pc, #172]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	604b      	str	r3, [r1, #4]
 8002f72:	e01a      	b.n	8002faa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f74:	4b29      	ldr	r3, [pc, #164]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a28      	ldr	r2, [pc, #160]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f80:	f7fd ffb4 	bl	8000eec <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f88:	f7fd ffb0 	bl	8000eec <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e31a      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f9a:	4b20      	ldr	r3, [pc, #128]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x1dc>
 8002fa6:	e000      	b.n	8002faa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fa8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d073      	beq.n	800309e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x21c>
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	d10e      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	4b14      	ldr	r3, [pc, #80]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d063      	beq.n	800309c <HAL_RCC_OscConfig+0x2f0>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d15f      	bne.n	800309c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e2f7      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe8:	d106      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x24c>
 8002fea:	4b0c      	ldr	r3, [pc, #48]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a0b      	ldr	r2, [pc, #44]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e025      	b.n	8003044 <HAL_RCC_OscConfig+0x298>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003000:	d114      	bne.n	800302c <HAL_RCC_OscConfig+0x280>
 8003002:	4b06      	ldr	r3, [pc, #24]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a05      	ldr	r2, [pc, #20]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8003008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	4b03      	ldr	r3, [pc, #12]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a02      	ldr	r2, [pc, #8]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e013      	b.n	8003044 <HAL_RCC_OscConfig+0x298>
 800301c:	40021000 	.word	0x40021000
 8003020:	08005904 	.word	0x08005904
 8003024:	20000004 	.word	0x20000004
 8003028:	20000008 	.word	0x20000008
 800302c:	4ba0      	ldr	r3, [pc, #640]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a9f      	ldr	r2, [pc, #636]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 8003032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	4b9d      	ldr	r3, [pc, #628]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a9c      	ldr	r2, [pc, #624]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 800303e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d013      	beq.n	8003074 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fd ff4e 	bl	8000eec <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003054:	f7fd ff4a 	bl	8000eec <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b64      	cmp	r3, #100	@ 0x64
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e2b4      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003066:	4b92      	ldr	r3, [pc, #584]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x2a8>
 8003072:	e014      	b.n	800309e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fd ff3a 	bl	8000eec <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800307c:	f7fd ff36 	bl	8000eec <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	@ 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e2a0      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800308e:	4b88      	ldr	r3, [pc, #544]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x2d0>
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d060      	beq.n	800316c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_OscConfig+0x310>
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	d119      	bne.n	80030ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d116      	bne.n	80030ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030bc:	4b7c      	ldr	r3, [pc, #496]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_OscConfig+0x328>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e27d      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d4:	4b76      	ldr	r3, [pc, #472]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	061b      	lsls	r3, r3, #24
 80030e2:	4973      	ldr	r1, [pc, #460]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e8:	e040      	b.n	800316c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d023      	beq.n	800313a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f2:	4b6f      	ldr	r3, [pc, #444]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a6e      	ldr	r2, [pc, #440]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 80030f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fe:	f7fd fef5 	bl	8000eec <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003106:	f7fd fef1 	bl	8000eec <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e25b      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003118:	4b65      	ldr	r3, [pc, #404]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003124:	4b62      	ldr	r3, [pc, #392]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	061b      	lsls	r3, r3, #24
 8003132:	495f      	ldr	r1, [pc, #380]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
 8003138:	e018      	b.n	800316c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313a:	4b5d      	ldr	r3, [pc, #372]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a5c      	ldr	r2, [pc, #368]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 8003140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003146:	f7fd fed1 	bl	8000eec <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314e:	f7fd fecd 	bl	8000eec <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e237      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003160:	4b53      	ldr	r3, [pc, #332]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1f0      	bne.n	800314e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d03c      	beq.n	80031f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01c      	beq.n	80031ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003180:	4b4b      	ldr	r3, [pc, #300]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 8003182:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003186:	4a4a      	ldr	r2, [pc, #296]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003190:	f7fd feac 	bl	8000eec <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003198:	f7fd fea8 	bl	8000eec <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e212      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031aa:	4b41      	ldr	r3, [pc, #260]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 80031ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0ef      	beq.n	8003198 <HAL_RCC_OscConfig+0x3ec>
 80031b8:	e01b      	b.n	80031f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ba:	4b3d      	ldr	r3, [pc, #244]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 80031bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031c0:	4a3b      	ldr	r2, [pc, #236]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 80031c2:	f023 0301 	bic.w	r3, r3, #1
 80031c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ca:	f7fd fe8f 	bl	8000eec <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d2:	f7fd fe8b 	bl	8000eec <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e1f5      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031e4:	4b32      	ldr	r3, [pc, #200]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 80031e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1ef      	bne.n	80031d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80a6 	beq.w	800334c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003200:	2300      	movs	r3, #0
 8003202:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003204:	4b2a      	ldr	r3, [pc, #168]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10d      	bne.n	800322c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003210:	4b27      	ldr	r3, [pc, #156]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003214:	4a26      	ldr	r2, [pc, #152]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 8003216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800321a:	6593      	str	r3, [r2, #88]	@ 0x58
 800321c:	4b24      	ldr	r3, [pc, #144]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003228:	2301      	movs	r3, #1
 800322a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800322c:	4b21      	ldr	r3, [pc, #132]	@ (80032b4 <HAL_RCC_OscConfig+0x508>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d118      	bne.n	800326a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003238:	4b1e      	ldr	r3, [pc, #120]	@ (80032b4 <HAL_RCC_OscConfig+0x508>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1d      	ldr	r2, [pc, #116]	@ (80032b4 <HAL_RCC_OscConfig+0x508>)
 800323e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003242:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003244:	f7fd fe52 	bl	8000eec <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324c:	f7fd fe4e 	bl	8000eec <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e1b8      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800325e:	4b15      	ldr	r3, [pc, #84]	@ (80032b4 <HAL_RCC_OscConfig+0x508>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d108      	bne.n	8003284 <HAL_RCC_OscConfig+0x4d8>
 8003272:	4b0f      	ldr	r3, [pc, #60]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003278:	4a0d      	ldr	r2, [pc, #52]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003282:	e029      	b.n	80032d8 <HAL_RCC_OscConfig+0x52c>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b05      	cmp	r3, #5
 800328a:	d115      	bne.n	80032b8 <HAL_RCC_OscConfig+0x50c>
 800328c:	4b08      	ldr	r3, [pc, #32]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003292:	4a07      	ldr	r2, [pc, #28]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 8003294:	f043 0304 	orr.w	r3, r3, #4
 8003298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800329c:	4b04      	ldr	r3, [pc, #16]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a2:	4a03      	ldr	r2, [pc, #12]	@ (80032b0 <HAL_RCC_OscConfig+0x504>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032ac:	e014      	b.n	80032d8 <HAL_RCC_OscConfig+0x52c>
 80032ae:	bf00      	nop
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40007000 	.word	0x40007000
 80032b8:	4b9d      	ldr	r3, [pc, #628]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 80032ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032be:	4a9c      	ldr	r2, [pc, #624]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032c8:	4b99      	ldr	r3, [pc, #612]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ce:	4a98      	ldr	r2, [pc, #608]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 80032d0:	f023 0304 	bic.w	r3, r3, #4
 80032d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d016      	beq.n	800330e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fd fe04 	bl	8000eec <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e8:	f7fd fe00 	bl	8000eec <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e168      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032fe:	4b8c      	ldr	r3, [pc, #560]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 8003300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0ed      	beq.n	80032e8 <HAL_RCC_OscConfig+0x53c>
 800330c:	e015      	b.n	800333a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7fd fded 	bl	8000eec <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003314:	e00a      	b.n	800332c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fd fde9 	bl	8000eec <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e151      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800332c:	4b80      	ldr	r3, [pc, #512]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1ed      	bne.n	8003316 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800333a:	7ffb      	ldrb	r3, [r7, #31]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d105      	bne.n	800334c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003340:	4b7b      	ldr	r3, [pc, #492]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003344:	4a7a      	ldr	r2, [pc, #488]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 8003346:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800334a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0320 	and.w	r3, r3, #32
 8003354:	2b00      	cmp	r3, #0
 8003356:	d03c      	beq.n	80033d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01c      	beq.n	800339a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003360:	4b73      	ldr	r3, [pc, #460]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 8003362:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003366:	4a72      	ldr	r2, [pc, #456]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7fd fdbc 	bl	8000eec <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003378:	f7fd fdb8 	bl	8000eec <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e122      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800338a:	4b69      	ldr	r3, [pc, #420]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 800338c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ef      	beq.n	8003378 <HAL_RCC_OscConfig+0x5cc>
 8003398:	e01b      	b.n	80033d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800339a:	4b65      	ldr	r3, [pc, #404]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 800339c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033a0:	4a63      	ldr	r2, [pc, #396]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 80033a2:	f023 0301 	bic.w	r3, r3, #1
 80033a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033aa:	f7fd fd9f 	bl	8000eec <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033b2:	f7fd fd9b 	bl	8000eec <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e105      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033c4:	4b5a      	ldr	r3, [pc, #360]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 80033c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1ef      	bne.n	80033b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 80f9 	beq.w	80035ce <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	f040 80cf 	bne.w	8003584 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033e6:	4b52      	ldr	r3, [pc, #328]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f003 0203 	and.w	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d12c      	bne.n	8003454 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003404:	3b01      	subs	r3, #1
 8003406:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d123      	bne.n	8003454 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003416:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d11b      	bne.n	8003454 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003426:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d113      	bne.n	8003454 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003436:	085b      	lsrs	r3, r3, #1
 8003438:	3b01      	subs	r3, #1
 800343a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d109      	bne.n	8003454 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	085b      	lsrs	r3, r3, #1
 800344c:	3b01      	subs	r3, #1
 800344e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d071      	beq.n	8003538 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2b0c      	cmp	r3, #12
 8003458:	d068      	beq.n	800352c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800345a:	4b35      	ldr	r3, [pc, #212]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d105      	bne.n	8003472 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003466:	4b32      	ldr	r3, [pc, #200]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e0ac      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003476:	4b2e      	ldr	r3, [pc, #184]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a2d      	ldr	r2, [pc, #180]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 800347c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003480:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003482:	f7fd fd33 	bl	8000eec <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348a:	f7fd fd2f 	bl	8000eec <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e099      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349c:	4b24      	ldr	r3, [pc, #144]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f0      	bne.n	800348a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a8:	4b21      	ldr	r3, [pc, #132]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	4b21      	ldr	r3, [pc, #132]	@ (8003534 <HAL_RCC_OscConfig+0x788>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80034b8:	3a01      	subs	r2, #1
 80034ba:	0112      	lsls	r2, r2, #4
 80034bc:	4311      	orrs	r1, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034c2:	0212      	lsls	r2, r2, #8
 80034c4:	4311      	orrs	r1, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034ca:	0852      	lsrs	r2, r2, #1
 80034cc:	3a01      	subs	r2, #1
 80034ce:	0552      	lsls	r2, r2, #21
 80034d0:	4311      	orrs	r1, r2
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80034d6:	0852      	lsrs	r2, r2, #1
 80034d8:	3a01      	subs	r2, #1
 80034da:	0652      	lsls	r2, r2, #25
 80034dc:	4311      	orrs	r1, r2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034e2:	06d2      	lsls	r2, r2, #27
 80034e4:	430a      	orrs	r2, r1
 80034e6:	4912      	ldr	r1, [pc, #72]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034ec:	4b10      	ldr	r3, [pc, #64]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 80034f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4a0c      	ldr	r2, [pc, #48]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 80034fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003502:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003504:	f7fd fcf2 	bl	8000eec <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350c:	f7fd fcee 	bl	8000eec <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e058      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800351e:	4b04      	ldr	r3, [pc, #16]	@ (8003530 <HAL_RCC_OscConfig+0x784>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800352a:	e050      	b.n	80035ce <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e04f      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
 8003530:	40021000 	.word	0x40021000
 8003534:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003538:	4b27      	ldr	r3, [pc, #156]	@ (80035d8 <HAL_RCC_OscConfig+0x82c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d144      	bne.n	80035ce <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003544:	4b24      	ldr	r3, [pc, #144]	@ (80035d8 <HAL_RCC_OscConfig+0x82c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a23      	ldr	r2, [pc, #140]	@ (80035d8 <HAL_RCC_OscConfig+0x82c>)
 800354a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800354e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003550:	4b21      	ldr	r3, [pc, #132]	@ (80035d8 <HAL_RCC_OscConfig+0x82c>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a20      	ldr	r2, [pc, #128]	@ (80035d8 <HAL_RCC_OscConfig+0x82c>)
 8003556:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800355a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800355c:	f7fd fcc6 	bl	8000eec <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003564:	f7fd fcc2 	bl	8000eec <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e02c      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003576:	4b18      	ldr	r3, [pc, #96]	@ (80035d8 <HAL_RCC_OscConfig+0x82c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x7b8>
 8003582:	e024      	b.n	80035ce <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2b0c      	cmp	r3, #12
 8003588:	d01f      	beq.n	80035ca <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358a:	4b13      	ldr	r3, [pc, #76]	@ (80035d8 <HAL_RCC_OscConfig+0x82c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a12      	ldr	r2, [pc, #72]	@ (80035d8 <HAL_RCC_OscConfig+0x82c>)
 8003590:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003596:	f7fd fca9 	bl	8000eec <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359e:	f7fd fca5 	bl	8000eec <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e00f      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b0:	4b09      	ldr	r3, [pc, #36]	@ (80035d8 <HAL_RCC_OscConfig+0x82c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f0      	bne.n	800359e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035bc:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <HAL_RCC_OscConfig+0x82c>)
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	4905      	ldr	r1, [pc, #20]	@ (80035d8 <HAL_RCC_OscConfig+0x82c>)
 80035c2:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <HAL_RCC_OscConfig+0x830>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	60cb      	str	r3, [r1, #12]
 80035c8:	e001      	b.n	80035ce <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3720      	adds	r7, #32
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	feeefffc 	.word	0xfeeefffc

080035e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0e7      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035f4:	4b75      	ldr	r3, [pc, #468]	@ (80037cc <HAL_RCC_ClockConfig+0x1ec>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d910      	bls.n	8003624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003602:	4b72      	ldr	r3, [pc, #456]	@ (80037cc <HAL_RCC_ClockConfig+0x1ec>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 0207 	bic.w	r2, r3, #7
 800360a:	4970      	ldr	r1, [pc, #448]	@ (80037cc <HAL_RCC_ClockConfig+0x1ec>)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	4313      	orrs	r3, r2
 8003610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003612:	4b6e      	ldr	r3, [pc, #440]	@ (80037cc <HAL_RCC_ClockConfig+0x1ec>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0cf      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d010      	beq.n	8003652 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	4b66      	ldr	r3, [pc, #408]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800363c:	429a      	cmp	r2, r3
 800363e:	d908      	bls.n	8003652 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003640:	4b63      	ldr	r3, [pc, #396]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4960      	ldr	r1, [pc, #384]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d04c      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b03      	cmp	r3, #3
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003666:	4b5a      	ldr	r3, [pc, #360]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d121      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e0a6      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d107      	bne.n	800368e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800367e:	4b54      	ldr	r3, [pc, #336]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d115      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e09a      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d107      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003696:	4b4e      	ldr	r3, [pc, #312]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e08e      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a6:	4b4a      	ldr	r3, [pc, #296]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e086      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036b6:	4b46      	ldr	r3, [pc, #280]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f023 0203 	bic.w	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4943      	ldr	r1, [pc, #268]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c8:	f7fd fc10 	bl	8000eec <HAL_GetTick>
 80036cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ce:	e00a      	b.n	80036e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d0:	f7fd fc0c 	bl	8000eec <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e06e      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e6:	4b3a      	ldr	r3, [pc, #232]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 020c 	and.w	r2, r3, #12
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d1eb      	bne.n	80036d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d010      	beq.n	8003726 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	4b31      	ldr	r3, [pc, #196]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003710:	429a      	cmp	r2, r3
 8003712:	d208      	bcs.n	8003726 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003714:	4b2e      	ldr	r3, [pc, #184]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	492b      	ldr	r1, [pc, #172]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003726:	4b29      	ldr	r3, [pc, #164]	@ (80037cc <HAL_RCC_ClockConfig+0x1ec>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d210      	bcs.n	8003756 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003734:	4b25      	ldr	r3, [pc, #148]	@ (80037cc <HAL_RCC_ClockConfig+0x1ec>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 0207 	bic.w	r2, r3, #7
 800373c:	4923      	ldr	r1, [pc, #140]	@ (80037cc <HAL_RCC_ClockConfig+0x1ec>)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	4313      	orrs	r3, r2
 8003742:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003744:	4b21      	ldr	r3, [pc, #132]	@ (80037cc <HAL_RCC_ClockConfig+0x1ec>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d001      	beq.n	8003756 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e036      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	d008      	beq.n	8003774 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003762:	4b1b      	ldr	r3, [pc, #108]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	4918      	ldr	r1, [pc, #96]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003770:	4313      	orrs	r3, r2
 8003772:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003780:	4b13      	ldr	r3, [pc, #76]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4910      	ldr	r1, [pc, #64]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003790:	4313      	orrs	r3, r2
 8003792:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003794:	f000 f824 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8003798:	4602      	mov	r2, r0
 800379a:	4b0d      	ldr	r3, [pc, #52]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f0>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	490b      	ldr	r1, [pc, #44]	@ (80037d4 <HAL_RCC_ClockConfig+0x1f4>)
 80037a6:	5ccb      	ldrb	r3, [r1, r3]
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
 80037b0:	4a09      	ldr	r2, [pc, #36]	@ (80037d8 <HAL_RCC_ClockConfig+0x1f8>)
 80037b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037b4:	4b09      	ldr	r3, [pc, #36]	@ (80037dc <HAL_RCC_ClockConfig+0x1fc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fd fb47 	bl	8000e4c <HAL_InitTick>
 80037be:	4603      	mov	r3, r0
 80037c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80037c2:	7afb      	ldrb	r3, [r7, #11]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40022000 	.word	0x40022000
 80037d0:	40021000 	.word	0x40021000
 80037d4:	08005904 	.word	0x08005904
 80037d8:	20000004 	.word	0x20000004
 80037dc:	20000008 	.word	0x20000008

080037e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	@ 0x24
 80037e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ee:	4b3e      	ldr	r3, [pc, #248]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037f8:	4b3b      	ldr	r3, [pc, #236]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0x34>
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d121      	bne.n	8003852 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d11e      	bne.n	8003852 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003814:	4b34      	ldr	r3, [pc, #208]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d107      	bne.n	8003830 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003820:	4b31      	ldr	r3, [pc, #196]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003826:	0a1b      	lsrs	r3, r3, #8
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	e005      	b.n	800383c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003830:	4b2d      	ldr	r3, [pc, #180]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800383c:	4a2b      	ldr	r2, [pc, #172]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003844:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10d      	bne.n	8003868 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003850:	e00a      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b04      	cmp	r3, #4
 8003856:	d102      	bne.n	800385e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003858:	4b25      	ldr	r3, [pc, #148]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800385a:	61bb      	str	r3, [r7, #24]
 800385c:	e004      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b08      	cmp	r3, #8
 8003862:	d101      	bne.n	8003868 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003864:	4b23      	ldr	r3, [pc, #140]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003866:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	d134      	bne.n	80038d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800386e:	4b1e      	ldr	r3, [pc, #120]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d003      	beq.n	8003886 <HAL_RCC_GetSysClockFreq+0xa6>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d003      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0xac>
 8003884:	e005      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003886:	4b1a      	ldr	r3, [pc, #104]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003888:	617b      	str	r3, [r7, #20]
      break;
 800388a:	e005      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800388c:	4b19      	ldr	r3, [pc, #100]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800388e:	617b      	str	r3, [r7, #20]
      break;
 8003890:	e002      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	617b      	str	r3, [r7, #20]
      break;
 8003896:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003898:	4b13      	ldr	r3, [pc, #76]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	3301      	adds	r3, #1
 80038a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038a6:	4b10      	ldr	r3, [pc, #64]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	0a1b      	lsrs	r3, r3, #8
 80038ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	fb03 f202 	mul.w	r2, r3, r2
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038be:	4b0a      	ldr	r3, [pc, #40]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	0e5b      	lsrs	r3, r3, #25
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	3301      	adds	r3, #1
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038d8:	69bb      	ldr	r3, [r7, #24]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3724      	adds	r7, #36	@ 0x24
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000
 80038ec:	0800591c 	.word	0x0800591c
 80038f0:	00f42400 	.word	0x00f42400
 80038f4:	007a1200 	.word	0x007a1200

080038f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038fc:	4b03      	ldr	r3, [pc, #12]	@ (800390c <HAL_RCC_GetHCLKFreq+0x14>)
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000004 	.word	0x20000004

08003910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003914:	f7ff fff0 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <HAL_RCC_GetPCLK1Freq+0x24>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4904      	ldr	r1, [pc, #16]	@ (8003938 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000
 8003938:	08005914 	.word	0x08005914

0800393c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003940:	f7ff ffda 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	0adb      	lsrs	r3, r3, #11
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	4904      	ldr	r1, [pc, #16]	@ (8003964 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40021000 	.word	0x40021000
 8003964:	08005914 	.word	0x08005914

08003968 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003974:	4b2a      	ldr	r3, [pc, #168]	@ (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003980:	f7ff f9a0 	bl	8002cc4 <HAL_PWREx_GetVoltageRange>
 8003984:	6178      	str	r0, [r7, #20]
 8003986:	e014      	b.n	80039b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003988:	4b25      	ldr	r3, [pc, #148]	@ (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398c:	4a24      	ldr	r2, [pc, #144]	@ (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800398e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003992:	6593      	str	r3, [r2, #88]	@ 0x58
 8003994:	4b22      	ldr	r3, [pc, #136]	@ (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039a0:	f7ff f990 	bl	8002cc4 <HAL_PWREx_GetVoltageRange>
 80039a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039b8:	d10b      	bne.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b80      	cmp	r3, #128	@ 0x80
 80039be:	d919      	bls.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80039c4:	d902      	bls.n	80039cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039c6:	2302      	movs	r3, #2
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	e013      	b.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039cc:	2301      	movs	r3, #1
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	e010      	b.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b80      	cmp	r3, #128	@ 0x80
 80039d6:	d902      	bls.n	80039de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039d8:	2303      	movs	r3, #3
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	e00a      	b.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b80      	cmp	r3, #128	@ 0x80
 80039e2:	d102      	bne.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039e4:	2302      	movs	r3, #2
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	e004      	b.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b70      	cmp	r3, #112	@ 0x70
 80039ee:	d101      	bne.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039f0:	2301      	movs	r3, #1
 80039f2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f023 0207 	bic.w	r2, r3, #7
 80039fc:	4909      	ldr	r1, [pc, #36]	@ (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a04:	4b07      	ldr	r3, [pc, #28]	@ (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d001      	beq.n	8003a16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40021000 	.word	0x40021000
 8003a24:	40022000 	.word	0x40022000

08003a28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a30:	2300      	movs	r3, #0
 8003a32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a34:	2300      	movs	r3, #0
 8003a36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d041      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a48:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a4c:	d02a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a4e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a52:	d824      	bhi.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a58:	d008      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a5e:	d81e      	bhi.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a68:	d010      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a6a:	e018      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a6c:	4b86      	ldr	r3, [pc, #536]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4a85      	ldr	r2, [pc, #532]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a78:	e015      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 facd 	bl	8004020 <RCCEx_PLLSAI1_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a8a:	e00c      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3320      	adds	r3, #32
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fbb6 	bl	8004204 <RCCEx_PLLSAI2_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a9c:	e003      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	74fb      	strb	r3, [r7, #19]
      break;
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aa6:	7cfb      	ldrb	r3, [r7, #19]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aac:	4b76      	ldr	r3, [pc, #472]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003aba:	4973      	ldr	r1, [pc, #460]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ac2:	e001      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac4:	7cfb      	ldrb	r3, [r7, #19]
 8003ac6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d041      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ad8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003adc:	d02a      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ade:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ae2:	d824      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ae4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ae8:	d008      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003aea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003aee:	d81e      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003af4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003af8:	d010      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003afa:	e018      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003afc:	4b62      	ldr	r3, [pc, #392]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a61      	ldr	r2, [pc, #388]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b08:	e015      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fa85 	bl	8004020 <RCCEx_PLLSAI1_Config>
 8003b16:	4603      	mov	r3, r0
 8003b18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b1a:	e00c      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3320      	adds	r3, #32
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fb6e 	bl	8004204 <RCCEx_PLLSAI2_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b2c:	e003      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	74fb      	strb	r3, [r7, #19]
      break;
 8003b32:	e000      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b36:	7cfb      	ldrb	r3, [r7, #19]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10b      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b3c:	4b52      	ldr	r3, [pc, #328]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b4a:	494f      	ldr	r1, [pc, #316]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b52:	e001      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
 8003b56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80a0 	beq.w	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b6a:	4b47      	ldr	r3, [pc, #284]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00d      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b80:	4b41      	ldr	r3, [pc, #260]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b84:	4a40      	ldr	r2, [pc, #256]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b8c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a3a      	ldr	r2, [pc, #232]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ba6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ba8:	f7fd f9a0 	bl	8000eec <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bae:	e009      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb0:	f7fd f99c 	bl	8000eec <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d902      	bls.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	74fb      	strb	r3, [r7, #19]
        break;
 8003bc2:	e005      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bc4:	4b31      	ldr	r3, [pc, #196]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ef      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003bd0:	7cfb      	ldrb	r3, [r7, #19]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d15c      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003be0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01f      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d019      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bf4:	4b24      	ldr	r3, [pc, #144]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c00:	4b21      	ldr	r3, [pc, #132]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c06:	4a20      	ldr	r2, [pc, #128]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c10:	4b1d      	ldr	r3, [pc, #116]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c16:	4a1c      	ldr	r2, [pc, #112]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c20:	4a19      	ldr	r2, [pc, #100]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d016      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fd f95b 	bl	8000eec <HAL_GetTick>
 8003c36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c38:	e00b      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fd f957 	bl	8000eec <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d902      	bls.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	74fb      	strb	r3, [r7, #19]
            break;
 8003c50:	e006      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c52:	4b0d      	ldr	r3, [pc, #52]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ec      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c66:	4b08      	ldr	r3, [pc, #32]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c76:	4904      	ldr	r1, [pc, #16]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c7e:	e009      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c80:	7cfb      	ldrb	r3, [r7, #19]
 8003c82:	74bb      	strb	r3, [r7, #18]
 8003c84:	e006      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c90:	7cfb      	ldrb	r3, [r7, #19]
 8003c92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c94:	7c7b      	ldrb	r3, [r7, #17]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d105      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9a:	4ba6      	ldr	r3, [pc, #664]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9e:	4aa5      	ldr	r2, [pc, #660]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ca0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ca4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cb2:	4ba0      	ldr	r3, [pc, #640]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb8:	f023 0203 	bic.w	r2, r3, #3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc0:	499c      	ldr	r1, [pc, #624]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cd4:	4b97      	ldr	r3, [pc, #604]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cda:	f023 020c 	bic.w	r2, r3, #12
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce2:	4994      	ldr	r1, [pc, #592]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cf6:	4b8f      	ldr	r3, [pc, #572]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	498b      	ldr	r1, [pc, #556]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d18:	4b86      	ldr	r3, [pc, #536]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d26:	4983      	ldr	r1, [pc, #524]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d3a:	4b7e      	ldr	r3, [pc, #504]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d48:	497a      	ldr	r1, [pc, #488]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d5c:	4b75      	ldr	r3, [pc, #468]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d62:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d6a:	4972      	ldr	r1, [pc, #456]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d7e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d84:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d8c:	4969      	ldr	r1, [pc, #420]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003da0:	4b64      	ldr	r3, [pc, #400]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dae:	4961      	ldr	r1, [pc, #388]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd0:	4958      	ldr	r1, [pc, #352]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003de4:	4b53      	ldr	r3, [pc, #332]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df2:	4950      	ldr	r1, [pc, #320]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e06:	4b4b      	ldr	r3, [pc, #300]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e14:	4947      	ldr	r1, [pc, #284]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e28:	4b42      	ldr	r3, [pc, #264]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e2e:	f023 0203 	bic.w	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e36:	493f      	ldr	r1, [pc, #252]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d028      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e50:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e58:	4936      	ldr	r1, [pc, #216]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e68:	d106      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e6a:	4b32      	ldr	r3, [pc, #200]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	4a31      	ldr	r2, [pc, #196]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e74:	60d3      	str	r3, [r2, #12]
 8003e76:	e011      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e80:	d10c      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3304      	adds	r3, #4
 8003e86:	2101      	movs	r1, #1
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 f8c9 	bl	8004020 <RCCEx_PLLSAI1_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e92:	7cfb      	ldrb	r3, [r7, #19]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003e98:	7cfb      	ldrb	r3, [r7, #19]
 8003e9a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d028      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ea8:	4b22      	ldr	r3, [pc, #136]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb6:	491f      	ldr	r1, [pc, #124]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ec6:	d106      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	4a19      	ldr	r2, [pc, #100]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ed2:	60d3      	str	r3, [r2, #12]
 8003ed4:	e011      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ede:	d10c      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f89a 	bl	8004020 <RCCEx_PLLSAI1_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ef0:	7cfb      	ldrb	r3, [r7, #19]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003ef6:	7cfb      	ldrb	r3, [r7, #19]
 8003ef8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d02a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f06:	4b0b      	ldr	r3, [pc, #44]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f14:	4907      	ldr	r1, [pc, #28]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f24:	d108      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f26:	4b03      	ldr	r3, [pc, #12]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	4a02      	ldr	r2, [pc, #8]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f30:	60d3      	str	r3, [r2, #12]
 8003f32:	e013      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003f34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3304      	adds	r3, #4
 8003f46:	2101      	movs	r1, #1
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 f869 	bl	8004020 <RCCEx_PLLSAI1_Config>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f52:	7cfb      	ldrb	r3, [r7, #19]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003f58:	7cfb      	ldrb	r3, [r7, #19]
 8003f5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d02f      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f68:	4b2c      	ldr	r3, [pc, #176]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f76:	4929      	ldr	r1, [pc, #164]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f86:	d10d      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	2102      	movs	r1, #2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 f846 	bl	8004020 <RCCEx_PLLSAI1_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d014      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003f9e:	7cfb      	ldrb	r3, [r7, #19]
 8003fa0:	74bb      	strb	r3, [r7, #18]
 8003fa2:	e011      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3320      	adds	r3, #32
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 f925 	bl	8004204 <RCCEx_PLLSAI2_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fbe:	7cfb      	ldrb	r3, [r7, #19]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00b      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003fd4:	4b11      	ldr	r3, [pc, #68]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fda:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fe4:	490d      	ldr	r1, [pc, #52]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00b      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ff8:	4b08      	ldr	r3, [pc, #32]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004008:	4904      	ldr	r1, [pc, #16]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004010:	7cbb      	ldrb	r3, [r7, #18]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000

08004020 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800402e:	4b74      	ldr	r3, [pc, #464]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d018      	beq.n	800406c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800403a:	4b71      	ldr	r3, [pc, #452]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0203 	and.w	r2, r3, #3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d10d      	bne.n	8004066 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
       ||
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004052:	4b6b      	ldr	r3, [pc, #428]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
       ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d047      	beq.n	80040f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
 800406a:	e044      	b.n	80040f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b03      	cmp	r3, #3
 8004072:	d018      	beq.n	80040a6 <RCCEx_PLLSAI1_Config+0x86>
 8004074:	2b03      	cmp	r3, #3
 8004076:	d825      	bhi.n	80040c4 <RCCEx_PLLSAI1_Config+0xa4>
 8004078:	2b01      	cmp	r3, #1
 800407a:	d002      	beq.n	8004082 <RCCEx_PLLSAI1_Config+0x62>
 800407c:	2b02      	cmp	r3, #2
 800407e:	d009      	beq.n	8004094 <RCCEx_PLLSAI1_Config+0x74>
 8004080:	e020      	b.n	80040c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004082:	4b5f      	ldr	r3, [pc, #380]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d11d      	bne.n	80040ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004092:	e01a      	b.n	80040ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004094:	4b5a      	ldr	r3, [pc, #360]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800409c:	2b00      	cmp	r3, #0
 800409e:	d116      	bne.n	80040ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a4:	e013      	b.n	80040ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040a6:	4b56      	ldr	r3, [pc, #344]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10f      	bne.n	80040d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040b2:	4b53      	ldr	r3, [pc, #332]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040c2:	e006      	b.n	80040d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	73fb      	strb	r3, [r7, #15]
      break;
 80040c8:	e004      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040ca:	bf00      	nop
 80040cc:	e002      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040ce:	bf00      	nop
 80040d0:	e000      	b.n	80040d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10d      	bne.n	80040f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040da:	4b49      	ldr	r3, [pc, #292]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6819      	ldr	r1, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	430b      	orrs	r3, r1
 80040f0:	4943      	ldr	r1, [pc, #268]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d17c      	bne.n	80041f6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040fc:	4b40      	ldr	r3, [pc, #256]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a3f      	ldr	r2, [pc, #252]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004102:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004106:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004108:	f7fc fef0 	bl	8000eec <HAL_GetTick>
 800410c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800410e:	e009      	b.n	8004124 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004110:	f7fc feec 	bl	8000eec <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d902      	bls.n	8004124 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	73fb      	strb	r3, [r7, #15]
        break;
 8004122:	e005      	b.n	8004130 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004124:	4b36      	ldr	r3, [pc, #216]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1ef      	bne.n	8004110 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d15f      	bne.n	80041f6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d110      	bne.n	800415e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800413c:	4b30      	ldr	r3, [pc, #192]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004144:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6892      	ldr	r2, [r2, #8]
 800414c:	0211      	lsls	r1, r2, #8
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68d2      	ldr	r2, [r2, #12]
 8004152:	06d2      	lsls	r2, r2, #27
 8004154:	430a      	orrs	r2, r1
 8004156:	492a      	ldr	r1, [pc, #168]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004158:	4313      	orrs	r3, r2
 800415a:	610b      	str	r3, [r1, #16]
 800415c:	e027      	b.n	80041ae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d112      	bne.n	800418a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004164:	4b26      	ldr	r3, [pc, #152]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800416c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6892      	ldr	r2, [r2, #8]
 8004174:	0211      	lsls	r1, r2, #8
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6912      	ldr	r2, [r2, #16]
 800417a:	0852      	lsrs	r2, r2, #1
 800417c:	3a01      	subs	r2, #1
 800417e:	0552      	lsls	r2, r2, #21
 8004180:	430a      	orrs	r2, r1
 8004182:	491f      	ldr	r1, [pc, #124]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004184:	4313      	orrs	r3, r2
 8004186:	610b      	str	r3, [r1, #16]
 8004188:	e011      	b.n	80041ae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800418a:	4b1d      	ldr	r3, [pc, #116]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004192:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6892      	ldr	r2, [r2, #8]
 800419a:	0211      	lsls	r1, r2, #8
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6952      	ldr	r2, [r2, #20]
 80041a0:	0852      	lsrs	r2, r2, #1
 80041a2:	3a01      	subs	r2, #1
 80041a4:	0652      	lsls	r2, r2, #25
 80041a6:	430a      	orrs	r2, r1
 80041a8:	4915      	ldr	r1, [pc, #84]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041ae:	4b14      	ldr	r3, [pc, #80]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a13      	ldr	r2, [pc, #76]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ba:	f7fc fe97 	bl	8000eec <HAL_GetTick>
 80041be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041c0:	e009      	b.n	80041d6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041c2:	f7fc fe93 	bl	8000eec <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d902      	bls.n	80041d6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	73fb      	strb	r3, [r7, #15]
          break;
 80041d4:	e005      	b.n	80041e2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0ef      	beq.n	80041c2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d106      	bne.n	80041f6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041e8:	4b05      	ldr	r3, [pc, #20]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	4903      	ldr	r1, [pc, #12]	@ (8004200 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40021000 	.word	0x40021000

08004204 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004212:	4b69      	ldr	r3, [pc, #420]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d018      	beq.n	8004250 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800421e:	4b66      	ldr	r3, [pc, #408]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0203 	and.w	r2, r3, #3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d10d      	bne.n	800424a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
       ||
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004236:	4b60      	ldr	r3, [pc, #384]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	091b      	lsrs	r3, r3, #4
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
       ||
 8004246:	429a      	cmp	r2, r3
 8004248:	d047      	beq.n	80042da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
 800424e:	e044      	b.n	80042da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d018      	beq.n	800428a <RCCEx_PLLSAI2_Config+0x86>
 8004258:	2b03      	cmp	r3, #3
 800425a:	d825      	bhi.n	80042a8 <RCCEx_PLLSAI2_Config+0xa4>
 800425c:	2b01      	cmp	r3, #1
 800425e:	d002      	beq.n	8004266 <RCCEx_PLLSAI2_Config+0x62>
 8004260:	2b02      	cmp	r3, #2
 8004262:	d009      	beq.n	8004278 <RCCEx_PLLSAI2_Config+0x74>
 8004264:	e020      	b.n	80042a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004266:	4b54      	ldr	r3, [pc, #336]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d11d      	bne.n	80042ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004276:	e01a      	b.n	80042ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004278:	4b4f      	ldr	r3, [pc, #316]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004280:	2b00      	cmp	r3, #0
 8004282:	d116      	bne.n	80042b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004288:	e013      	b.n	80042b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800428a:	4b4b      	ldr	r3, [pc, #300]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10f      	bne.n	80042b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004296:	4b48      	ldr	r3, [pc, #288]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042a6:	e006      	b.n	80042b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
      break;
 80042ac:	e004      	b.n	80042b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042ae:	bf00      	nop
 80042b0:	e002      	b.n	80042b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042b2:	bf00      	nop
 80042b4:	e000      	b.n	80042b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10d      	bne.n	80042da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042be:	4b3e      	ldr	r3, [pc, #248]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6819      	ldr	r1, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	430b      	orrs	r3, r1
 80042d4:	4938      	ldr	r1, [pc, #224]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d166      	bne.n	80043ae <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042e0:	4b35      	ldr	r3, [pc, #212]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a34      	ldr	r2, [pc, #208]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ec:	f7fc fdfe 	bl	8000eec <HAL_GetTick>
 80042f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042f2:	e009      	b.n	8004308 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042f4:	f7fc fdfa 	bl	8000eec <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d902      	bls.n	8004308 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	73fb      	strb	r3, [r7, #15]
        break;
 8004306:	e005      	b.n	8004314 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004308:	4b2b      	ldr	r3, [pc, #172]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1ef      	bne.n	80042f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d149      	bne.n	80043ae <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d110      	bne.n	8004342 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004320:	4b25      	ldr	r3, [pc, #148]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004328:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6892      	ldr	r2, [r2, #8]
 8004330:	0211      	lsls	r1, r2, #8
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68d2      	ldr	r2, [r2, #12]
 8004336:	06d2      	lsls	r2, r2, #27
 8004338:	430a      	orrs	r2, r1
 800433a:	491f      	ldr	r1, [pc, #124]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800433c:	4313      	orrs	r3, r2
 800433e:	614b      	str	r3, [r1, #20]
 8004340:	e011      	b.n	8004366 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004342:	4b1d      	ldr	r3, [pc, #116]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800434a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6892      	ldr	r2, [r2, #8]
 8004352:	0211      	lsls	r1, r2, #8
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6912      	ldr	r2, [r2, #16]
 8004358:	0852      	lsrs	r2, r2, #1
 800435a:	3a01      	subs	r2, #1
 800435c:	0652      	lsls	r2, r2, #25
 800435e:	430a      	orrs	r2, r1
 8004360:	4915      	ldr	r1, [pc, #84]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004362:	4313      	orrs	r3, r2
 8004364:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004366:	4b14      	ldr	r3, [pc, #80]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a13      	ldr	r2, [pc, #76]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800436c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004370:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004372:	f7fc fdbb 	bl	8000eec <HAL_GetTick>
 8004376:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004378:	e009      	b.n	800438e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800437a:	f7fc fdb7 	bl	8000eec <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d902      	bls.n	800438e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	73fb      	strb	r3, [r7, #15]
          break;
 800438c:	e005      	b.n	800439a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800438e:	4b0a      	ldr	r3, [pc, #40]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0ef      	beq.n	800437a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d106      	bne.n	80043ae <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043a0:	4b05      	ldr	r3, [pc, #20]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043a2:	695a      	ldr	r2, [r3, #20]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	4903      	ldr	r1, [pc, #12]	@ (80043b8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40021000 	.word	0x40021000

080043bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e040      	b.n	8004450 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fc fb5c 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2224      	movs	r2, #36	@ 0x24
 80043e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0201 	bic.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fb6a 	bl	8004adc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f8af 	bl	800456c <UART_SetConfig>
 800440e:	4603      	mov	r3, r0
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e01b      	b.n	8004450 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004426:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004436:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fbe9 	bl	8004c20 <UART_CheckIdleState>
 800444e:	4603      	mov	r3, r0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08a      	sub	sp, #40	@ 0x28
 800445c:	af02      	add	r7, sp, #8
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800446c:	2b20      	cmp	r3, #32
 800446e:	d177      	bne.n	8004560 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <HAL_UART_Transmit+0x24>
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e070      	b.n	8004562 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2221      	movs	r2, #33	@ 0x21
 800448c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800448e:	f7fc fd2d 	bl	8000eec <HAL_GetTick>
 8004492:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	88fa      	ldrh	r2, [r7, #6]
 8004498:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	88fa      	ldrh	r2, [r7, #6]
 80044a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ac:	d108      	bne.n	80044c0 <HAL_UART_Transmit+0x68>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d104      	bne.n	80044c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	e003      	b.n	80044c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044c8:	e02f      	b.n	800452a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2200      	movs	r2, #0
 80044d2:	2180      	movs	r1, #128	@ 0x80
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fc4b 	bl	8004d70 <UART_WaitOnFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e03b      	b.n	8004562 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10b      	bne.n	8004508 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	881a      	ldrh	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044fc:	b292      	uxth	r2, r2
 80044fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	3302      	adds	r3, #2
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	e007      	b.n	8004518 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	781a      	ldrb	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	3301      	adds	r3, #1
 8004516:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1c9      	bne.n	80044ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2200      	movs	r2, #0
 800453e:	2140      	movs	r1, #64	@ 0x40
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 fc15 	bl	8004d70 <UART_WaitOnFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d004      	beq.n	8004556 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e005      	b.n	8004562 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	e000      	b.n	8004562 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004560:	2302      	movs	r3, #2
  }
}
 8004562:	4618      	mov	r0, r3
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800456c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004570:	b08a      	sub	sp, #40	@ 0x28
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	431a      	orrs	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	431a      	orrs	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	4313      	orrs	r3, r2
 8004592:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4ba4      	ldr	r3, [pc, #656]	@ (800482c <UART_SetConfig+0x2c0>)
 800459c:	4013      	ands	r3, r2
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a99      	ldr	r2, [pc, #612]	@ (8004830 <UART_SetConfig+0x2c4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d4:	4313      	orrs	r3, r2
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e8:	430a      	orrs	r2, r1
 80045ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a90      	ldr	r2, [pc, #576]	@ (8004834 <UART_SetConfig+0x2c8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d126      	bne.n	8004644 <UART_SetConfig+0xd8>
 80045f6:	4b90      	ldr	r3, [pc, #576]	@ (8004838 <UART_SetConfig+0x2cc>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	2b03      	cmp	r3, #3
 8004602:	d81b      	bhi.n	800463c <UART_SetConfig+0xd0>
 8004604:	a201      	add	r2, pc, #4	@ (adr r2, 800460c <UART_SetConfig+0xa0>)
 8004606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460a:	bf00      	nop
 800460c:	0800461d 	.word	0x0800461d
 8004610:	0800462d 	.word	0x0800462d
 8004614:	08004625 	.word	0x08004625
 8004618:	08004635 	.word	0x08004635
 800461c:	2301      	movs	r3, #1
 800461e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004622:	e116      	b.n	8004852 <UART_SetConfig+0x2e6>
 8004624:	2302      	movs	r3, #2
 8004626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800462a:	e112      	b.n	8004852 <UART_SetConfig+0x2e6>
 800462c:	2304      	movs	r3, #4
 800462e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004632:	e10e      	b.n	8004852 <UART_SetConfig+0x2e6>
 8004634:	2308      	movs	r3, #8
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800463a:	e10a      	b.n	8004852 <UART_SetConfig+0x2e6>
 800463c:	2310      	movs	r3, #16
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004642:	e106      	b.n	8004852 <UART_SetConfig+0x2e6>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a7c      	ldr	r2, [pc, #496]	@ (800483c <UART_SetConfig+0x2d0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d138      	bne.n	80046c0 <UART_SetConfig+0x154>
 800464e:	4b7a      	ldr	r3, [pc, #488]	@ (8004838 <UART_SetConfig+0x2cc>)
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004654:	f003 030c 	and.w	r3, r3, #12
 8004658:	2b0c      	cmp	r3, #12
 800465a:	d82d      	bhi.n	80046b8 <UART_SetConfig+0x14c>
 800465c:	a201      	add	r2, pc, #4	@ (adr r2, 8004664 <UART_SetConfig+0xf8>)
 800465e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004662:	bf00      	nop
 8004664:	08004699 	.word	0x08004699
 8004668:	080046b9 	.word	0x080046b9
 800466c:	080046b9 	.word	0x080046b9
 8004670:	080046b9 	.word	0x080046b9
 8004674:	080046a9 	.word	0x080046a9
 8004678:	080046b9 	.word	0x080046b9
 800467c:	080046b9 	.word	0x080046b9
 8004680:	080046b9 	.word	0x080046b9
 8004684:	080046a1 	.word	0x080046a1
 8004688:	080046b9 	.word	0x080046b9
 800468c:	080046b9 	.word	0x080046b9
 8004690:	080046b9 	.word	0x080046b9
 8004694:	080046b1 	.word	0x080046b1
 8004698:	2300      	movs	r3, #0
 800469a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800469e:	e0d8      	b.n	8004852 <UART_SetConfig+0x2e6>
 80046a0:	2302      	movs	r3, #2
 80046a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a6:	e0d4      	b.n	8004852 <UART_SetConfig+0x2e6>
 80046a8:	2304      	movs	r3, #4
 80046aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ae:	e0d0      	b.n	8004852 <UART_SetConfig+0x2e6>
 80046b0:	2308      	movs	r3, #8
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b6:	e0cc      	b.n	8004852 <UART_SetConfig+0x2e6>
 80046b8:	2310      	movs	r3, #16
 80046ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046be:	e0c8      	b.n	8004852 <UART_SetConfig+0x2e6>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a5e      	ldr	r2, [pc, #376]	@ (8004840 <UART_SetConfig+0x2d4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d125      	bne.n	8004716 <UART_SetConfig+0x1aa>
 80046ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004838 <UART_SetConfig+0x2cc>)
 80046cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80046d4:	2b30      	cmp	r3, #48	@ 0x30
 80046d6:	d016      	beq.n	8004706 <UART_SetConfig+0x19a>
 80046d8:	2b30      	cmp	r3, #48	@ 0x30
 80046da:	d818      	bhi.n	800470e <UART_SetConfig+0x1a2>
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d00a      	beq.n	80046f6 <UART_SetConfig+0x18a>
 80046e0:	2b20      	cmp	r3, #32
 80046e2:	d814      	bhi.n	800470e <UART_SetConfig+0x1a2>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <UART_SetConfig+0x182>
 80046e8:	2b10      	cmp	r3, #16
 80046ea:	d008      	beq.n	80046fe <UART_SetConfig+0x192>
 80046ec:	e00f      	b.n	800470e <UART_SetConfig+0x1a2>
 80046ee:	2300      	movs	r3, #0
 80046f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046f4:	e0ad      	b.n	8004852 <UART_SetConfig+0x2e6>
 80046f6:	2302      	movs	r3, #2
 80046f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046fc:	e0a9      	b.n	8004852 <UART_SetConfig+0x2e6>
 80046fe:	2304      	movs	r3, #4
 8004700:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004704:	e0a5      	b.n	8004852 <UART_SetConfig+0x2e6>
 8004706:	2308      	movs	r3, #8
 8004708:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800470c:	e0a1      	b.n	8004852 <UART_SetConfig+0x2e6>
 800470e:	2310      	movs	r3, #16
 8004710:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004714:	e09d      	b.n	8004852 <UART_SetConfig+0x2e6>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a4a      	ldr	r2, [pc, #296]	@ (8004844 <UART_SetConfig+0x2d8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d125      	bne.n	800476c <UART_SetConfig+0x200>
 8004720:	4b45      	ldr	r3, [pc, #276]	@ (8004838 <UART_SetConfig+0x2cc>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004726:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800472a:	2bc0      	cmp	r3, #192	@ 0xc0
 800472c:	d016      	beq.n	800475c <UART_SetConfig+0x1f0>
 800472e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004730:	d818      	bhi.n	8004764 <UART_SetConfig+0x1f8>
 8004732:	2b80      	cmp	r3, #128	@ 0x80
 8004734:	d00a      	beq.n	800474c <UART_SetConfig+0x1e0>
 8004736:	2b80      	cmp	r3, #128	@ 0x80
 8004738:	d814      	bhi.n	8004764 <UART_SetConfig+0x1f8>
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <UART_SetConfig+0x1d8>
 800473e:	2b40      	cmp	r3, #64	@ 0x40
 8004740:	d008      	beq.n	8004754 <UART_SetConfig+0x1e8>
 8004742:	e00f      	b.n	8004764 <UART_SetConfig+0x1f8>
 8004744:	2300      	movs	r3, #0
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474a:	e082      	b.n	8004852 <UART_SetConfig+0x2e6>
 800474c:	2302      	movs	r3, #2
 800474e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004752:	e07e      	b.n	8004852 <UART_SetConfig+0x2e6>
 8004754:	2304      	movs	r3, #4
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475a:	e07a      	b.n	8004852 <UART_SetConfig+0x2e6>
 800475c:	2308      	movs	r3, #8
 800475e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004762:	e076      	b.n	8004852 <UART_SetConfig+0x2e6>
 8004764:	2310      	movs	r3, #16
 8004766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800476a:	e072      	b.n	8004852 <UART_SetConfig+0x2e6>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a35      	ldr	r2, [pc, #212]	@ (8004848 <UART_SetConfig+0x2dc>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d12a      	bne.n	80047cc <UART_SetConfig+0x260>
 8004776:	4b30      	ldr	r3, [pc, #192]	@ (8004838 <UART_SetConfig+0x2cc>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004780:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004784:	d01a      	beq.n	80047bc <UART_SetConfig+0x250>
 8004786:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800478a:	d81b      	bhi.n	80047c4 <UART_SetConfig+0x258>
 800478c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004790:	d00c      	beq.n	80047ac <UART_SetConfig+0x240>
 8004792:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004796:	d815      	bhi.n	80047c4 <UART_SetConfig+0x258>
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <UART_SetConfig+0x238>
 800479c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047a0:	d008      	beq.n	80047b4 <UART_SetConfig+0x248>
 80047a2:	e00f      	b.n	80047c4 <UART_SetConfig+0x258>
 80047a4:	2300      	movs	r3, #0
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047aa:	e052      	b.n	8004852 <UART_SetConfig+0x2e6>
 80047ac:	2302      	movs	r3, #2
 80047ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b2:	e04e      	b.n	8004852 <UART_SetConfig+0x2e6>
 80047b4:	2304      	movs	r3, #4
 80047b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ba:	e04a      	b.n	8004852 <UART_SetConfig+0x2e6>
 80047bc:	2308      	movs	r3, #8
 80047be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c2:	e046      	b.n	8004852 <UART_SetConfig+0x2e6>
 80047c4:	2310      	movs	r3, #16
 80047c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ca:	e042      	b.n	8004852 <UART_SetConfig+0x2e6>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a17      	ldr	r2, [pc, #92]	@ (8004830 <UART_SetConfig+0x2c4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d13a      	bne.n	800484c <UART_SetConfig+0x2e0>
 80047d6:	4b18      	ldr	r3, [pc, #96]	@ (8004838 <UART_SetConfig+0x2cc>)
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80047e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047e4:	d01a      	beq.n	800481c <UART_SetConfig+0x2b0>
 80047e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047ea:	d81b      	bhi.n	8004824 <UART_SetConfig+0x2b8>
 80047ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047f0:	d00c      	beq.n	800480c <UART_SetConfig+0x2a0>
 80047f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047f6:	d815      	bhi.n	8004824 <UART_SetConfig+0x2b8>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <UART_SetConfig+0x298>
 80047fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004800:	d008      	beq.n	8004814 <UART_SetConfig+0x2a8>
 8004802:	e00f      	b.n	8004824 <UART_SetConfig+0x2b8>
 8004804:	2300      	movs	r3, #0
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800480a:	e022      	b.n	8004852 <UART_SetConfig+0x2e6>
 800480c:	2302      	movs	r3, #2
 800480e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004812:	e01e      	b.n	8004852 <UART_SetConfig+0x2e6>
 8004814:	2304      	movs	r3, #4
 8004816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800481a:	e01a      	b.n	8004852 <UART_SetConfig+0x2e6>
 800481c:	2308      	movs	r3, #8
 800481e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004822:	e016      	b.n	8004852 <UART_SetConfig+0x2e6>
 8004824:	2310      	movs	r3, #16
 8004826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800482a:	e012      	b.n	8004852 <UART_SetConfig+0x2e6>
 800482c:	efff69f3 	.word	0xefff69f3
 8004830:	40008000 	.word	0x40008000
 8004834:	40013800 	.word	0x40013800
 8004838:	40021000 	.word	0x40021000
 800483c:	40004400 	.word	0x40004400
 8004840:	40004800 	.word	0x40004800
 8004844:	40004c00 	.word	0x40004c00
 8004848:	40005000 	.word	0x40005000
 800484c:	2310      	movs	r3, #16
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a9f      	ldr	r2, [pc, #636]	@ (8004ad4 <UART_SetConfig+0x568>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d17a      	bne.n	8004952 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800485c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004860:	2b08      	cmp	r3, #8
 8004862:	d824      	bhi.n	80048ae <UART_SetConfig+0x342>
 8004864:	a201      	add	r2, pc, #4	@ (adr r2, 800486c <UART_SetConfig+0x300>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	08004891 	.word	0x08004891
 8004870:	080048af 	.word	0x080048af
 8004874:	08004899 	.word	0x08004899
 8004878:	080048af 	.word	0x080048af
 800487c:	0800489f 	.word	0x0800489f
 8004880:	080048af 	.word	0x080048af
 8004884:	080048af 	.word	0x080048af
 8004888:	080048af 	.word	0x080048af
 800488c:	080048a7 	.word	0x080048a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004890:	f7ff f83e 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8004894:	61f8      	str	r0, [r7, #28]
        break;
 8004896:	e010      	b.n	80048ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004898:	4b8f      	ldr	r3, [pc, #572]	@ (8004ad8 <UART_SetConfig+0x56c>)
 800489a:	61fb      	str	r3, [r7, #28]
        break;
 800489c:	e00d      	b.n	80048ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489e:	f7fe ff9f 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 80048a2:	61f8      	str	r0, [r7, #28]
        break;
 80048a4:	e009      	b.n	80048ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048aa:	61fb      	str	r3, [r7, #28]
        break;
 80048ac:	e005      	b.n	80048ba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80fb 	beq.w	8004ab8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	4413      	add	r3, r2
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d305      	bcc.n	80048de <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d903      	bls.n	80048e6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048e4:	e0e8      	b.n	8004ab8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	2200      	movs	r2, #0
 80048ea:	461c      	mov	r4, r3
 80048ec:	4615      	mov	r5, r2
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	022b      	lsls	r3, r5, #8
 80048f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80048fc:	0222      	lsls	r2, r4, #8
 80048fe:	68f9      	ldr	r1, [r7, #12]
 8004900:	6849      	ldr	r1, [r1, #4]
 8004902:	0849      	lsrs	r1, r1, #1
 8004904:	2000      	movs	r0, #0
 8004906:	4688      	mov	r8, r1
 8004908:	4681      	mov	r9, r0
 800490a:	eb12 0a08 	adds.w	sl, r2, r8
 800490e:	eb43 0b09 	adc.w	fp, r3, r9
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	603b      	str	r3, [r7, #0]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004920:	4650      	mov	r0, sl
 8004922:	4659      	mov	r1, fp
 8004924:	f7fb fcbc 	bl	80002a0 <__aeabi_uldivmod>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4613      	mov	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004936:	d308      	bcc.n	800494a <UART_SetConfig+0x3de>
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800493e:	d204      	bcs.n	800494a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	60da      	str	r2, [r3, #12]
 8004948:	e0b6      	b.n	8004ab8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004950:	e0b2      	b.n	8004ab8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800495a:	d15e      	bne.n	8004a1a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800495c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004960:	2b08      	cmp	r3, #8
 8004962:	d828      	bhi.n	80049b6 <UART_SetConfig+0x44a>
 8004964:	a201      	add	r2, pc, #4	@ (adr r2, 800496c <UART_SetConfig+0x400>)
 8004966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496a:	bf00      	nop
 800496c:	08004991 	.word	0x08004991
 8004970:	08004999 	.word	0x08004999
 8004974:	080049a1 	.word	0x080049a1
 8004978:	080049b7 	.word	0x080049b7
 800497c:	080049a7 	.word	0x080049a7
 8004980:	080049b7 	.word	0x080049b7
 8004984:	080049b7 	.word	0x080049b7
 8004988:	080049b7 	.word	0x080049b7
 800498c:	080049af 	.word	0x080049af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004990:	f7fe ffbe 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8004994:	61f8      	str	r0, [r7, #28]
        break;
 8004996:	e014      	b.n	80049c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004998:	f7fe ffd0 	bl	800393c <HAL_RCC_GetPCLK2Freq>
 800499c:	61f8      	str	r0, [r7, #28]
        break;
 800499e:	e010      	b.n	80049c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049a0:	4b4d      	ldr	r3, [pc, #308]	@ (8004ad8 <UART_SetConfig+0x56c>)
 80049a2:	61fb      	str	r3, [r7, #28]
        break;
 80049a4:	e00d      	b.n	80049c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049a6:	f7fe ff1b 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 80049aa:	61f8      	str	r0, [r7, #28]
        break;
 80049ac:	e009      	b.n	80049c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049b2:	61fb      	str	r3, [r7, #28]
        break;
 80049b4:	e005      	b.n	80049c2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d077      	beq.n	8004ab8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	005a      	lsls	r2, r3, #1
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	085b      	lsrs	r3, r3, #1
 80049d2:	441a      	add	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b0f      	cmp	r3, #15
 80049e2:	d916      	bls.n	8004a12 <UART_SetConfig+0x4a6>
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ea:	d212      	bcs.n	8004a12 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	f023 030f 	bic.w	r3, r3, #15
 80049f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	085b      	lsrs	r3, r3, #1
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	8afb      	ldrh	r3, [r7, #22]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	8afa      	ldrh	r2, [r7, #22]
 8004a0e:	60da      	str	r2, [r3, #12]
 8004a10:	e052      	b.n	8004ab8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a18:	e04e      	b.n	8004ab8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d827      	bhi.n	8004a72 <UART_SetConfig+0x506>
 8004a22:	a201      	add	r2, pc, #4	@ (adr r2, 8004a28 <UART_SetConfig+0x4bc>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a4d 	.word	0x08004a4d
 8004a2c:	08004a55 	.word	0x08004a55
 8004a30:	08004a5d 	.word	0x08004a5d
 8004a34:	08004a73 	.word	0x08004a73
 8004a38:	08004a63 	.word	0x08004a63
 8004a3c:	08004a73 	.word	0x08004a73
 8004a40:	08004a73 	.word	0x08004a73
 8004a44:	08004a73 	.word	0x08004a73
 8004a48:	08004a6b 	.word	0x08004a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a4c:	f7fe ff60 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8004a50:	61f8      	str	r0, [r7, #28]
        break;
 8004a52:	e014      	b.n	8004a7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a54:	f7fe ff72 	bl	800393c <HAL_RCC_GetPCLK2Freq>
 8004a58:	61f8      	str	r0, [r7, #28]
        break;
 8004a5a:	e010      	b.n	8004a7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad8 <UART_SetConfig+0x56c>)
 8004a5e:	61fb      	str	r3, [r7, #28]
        break;
 8004a60:	e00d      	b.n	8004a7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a62:	f7fe febd 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8004a66:	61f8      	str	r0, [r7, #28]
        break;
 8004a68:	e009      	b.n	8004a7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a6e:	61fb      	str	r3, [r7, #28]
        break;
 8004a70:	e005      	b.n	8004a7e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a7c:	bf00      	nop
    }

    if (pclk != 0U)
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d019      	beq.n	8004ab8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	085a      	lsrs	r2, r3, #1
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	441a      	add	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	2b0f      	cmp	r3, #15
 8004a9c:	d909      	bls.n	8004ab2 <UART_SetConfig+0x546>
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa4:	d205      	bcs.n	8004ab2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60da      	str	r2, [r3, #12]
 8004ab0:	e002      	b.n	8004ab8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ac4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3728      	adds	r7, #40	@ 0x28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40008000 	.word	0x40008000
 8004ad8:	00f42400 	.word	0x00f42400

08004adc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01a      	beq.n	8004bf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bda:	d10a      	bne.n	8004bf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	605a      	str	r2, [r3, #4]
  }
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b098      	sub	sp, #96	@ 0x60
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c30:	f7fc f95c 	bl	8000eec <HAL_GetTick>
 8004c34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d12e      	bne.n	8004ca2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f88c 	bl	8004d70 <UART_WaitOnFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d021      	beq.n	8004ca2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c66:	e853 3f00 	ldrex	r3, [r3]
 8004c6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c72:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c7e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c84:	e841 2300 	strex	r3, r2, [r1]
 8004c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e6      	bne.n	8004c5e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e062      	b.n	8004d68 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d149      	bne.n	8004d44 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f856 	bl	8004d70 <UART_WaitOnFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d03c      	beq.n	8004d44 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	623b      	str	r3, [r7, #32]
   return(result);
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ce8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e6      	bne.n	8004cca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3308      	adds	r3, #8
 8004d02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3308      	adds	r3, #8
 8004d1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d1c:	61fa      	str	r2, [r7, #28]
 8004d1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	69b9      	ldr	r1, [r7, #24]
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	617b      	str	r3, [r7, #20]
   return(result);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e5      	bne.n	8004cfc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e011      	b.n	8004d68 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3758      	adds	r7, #88	@ 0x58
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d80:	e04f      	b.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d04b      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8a:	f7fc f8af 	bl	8000eec <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d302      	bcc.n	8004da0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e04e      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d037      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b80      	cmp	r3, #128	@ 0x80
 8004db6:	d034      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b40      	cmp	r3, #64	@ 0x40
 8004dbc:	d031      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d110      	bne.n	8004dee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2208      	movs	r2, #8
 8004dd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f838 	bl	8004e4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2208      	movs	r2, #8
 8004dde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e029      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004df8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dfc:	d111      	bne.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f81e 	bl	8004e4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e00f      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	bf0c      	ite	eq
 8004e32:	2301      	moveq	r3, #1
 8004e34:	2300      	movne	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d0a0      	beq.n	8004d82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b095      	sub	sp, #84	@ 0x54
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e5a:	e853 3f00 	ldrex	r3, [r3]
 8004e5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e70:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e72:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e6      	bne.n	8004e52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3308      	adds	r3, #8
 8004e8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	e853 3f00 	ldrex	r3, [r3]
 8004e92:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f023 0301 	bic.w	r3, r3, #1
 8004e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ea4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e5      	bne.n	8004e84 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d118      	bne.n	8004ef2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f023 0310 	bic.w	r3, r3, #16
 8004ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6979      	ldr	r1, [r7, #20]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	613b      	str	r3, [r7, #16]
   return(result);
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e6      	bne.n	8004ec0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f06:	bf00      	nop
 8004f08:	3754      	adds	r7, #84	@ 0x54
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
	...

08004f14 <siprintf>:
 8004f14:	b40e      	push	{r1, r2, r3}
 8004f16:	b500      	push	{lr}
 8004f18:	b09c      	sub	sp, #112	@ 0x70
 8004f1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004f1c:	9002      	str	r0, [sp, #8]
 8004f1e:	9006      	str	r0, [sp, #24]
 8004f20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004f24:	4809      	ldr	r0, [pc, #36]	@ (8004f4c <siprintf+0x38>)
 8004f26:	9107      	str	r1, [sp, #28]
 8004f28:	9104      	str	r1, [sp, #16]
 8004f2a:	4909      	ldr	r1, [pc, #36]	@ (8004f50 <siprintf+0x3c>)
 8004f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f30:	9105      	str	r1, [sp, #20]
 8004f32:	6800      	ldr	r0, [r0, #0]
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	a902      	add	r1, sp, #8
 8004f38:	f000 f994 	bl	8005264 <_svfiprintf_r>
 8004f3c:	9b02      	ldr	r3, [sp, #8]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	701a      	strb	r2, [r3, #0]
 8004f42:	b01c      	add	sp, #112	@ 0x70
 8004f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f48:	b003      	add	sp, #12
 8004f4a:	4770      	bx	lr
 8004f4c:	20000010 	.word	0x20000010
 8004f50:	ffff0208 	.word	0xffff0208

08004f54 <memset>:
 8004f54:	4402      	add	r2, r0
 8004f56:	4603      	mov	r3, r0
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d100      	bne.n	8004f5e <memset+0xa>
 8004f5c:	4770      	bx	lr
 8004f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f62:	e7f9      	b.n	8004f58 <memset+0x4>

08004f64 <__errno>:
 8004f64:	4b01      	ldr	r3, [pc, #4]	@ (8004f6c <__errno+0x8>)
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	20000010 	.word	0x20000010

08004f70 <__libc_init_array>:
 8004f70:	b570      	push	{r4, r5, r6, lr}
 8004f72:	4d0d      	ldr	r5, [pc, #52]	@ (8004fa8 <__libc_init_array+0x38>)
 8004f74:	4c0d      	ldr	r4, [pc, #52]	@ (8004fac <__libc_init_array+0x3c>)
 8004f76:	1b64      	subs	r4, r4, r5
 8004f78:	10a4      	asrs	r4, r4, #2
 8004f7a:	2600      	movs	r6, #0
 8004f7c:	42a6      	cmp	r6, r4
 8004f7e:	d109      	bne.n	8004f94 <__libc_init_array+0x24>
 8004f80:	4d0b      	ldr	r5, [pc, #44]	@ (8004fb0 <__libc_init_array+0x40>)
 8004f82:	4c0c      	ldr	r4, [pc, #48]	@ (8004fb4 <__libc_init_array+0x44>)
 8004f84:	f000 fc66 	bl	8005854 <_init>
 8004f88:	1b64      	subs	r4, r4, r5
 8004f8a:	10a4      	asrs	r4, r4, #2
 8004f8c:	2600      	movs	r6, #0
 8004f8e:	42a6      	cmp	r6, r4
 8004f90:	d105      	bne.n	8004f9e <__libc_init_array+0x2e>
 8004f92:	bd70      	pop	{r4, r5, r6, pc}
 8004f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f98:	4798      	blx	r3
 8004f9a:	3601      	adds	r6, #1
 8004f9c:	e7ee      	b.n	8004f7c <__libc_init_array+0xc>
 8004f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa2:	4798      	blx	r3
 8004fa4:	3601      	adds	r6, #1
 8004fa6:	e7f2      	b.n	8004f8e <__libc_init_array+0x1e>
 8004fa8:	08005988 	.word	0x08005988
 8004fac:	08005988 	.word	0x08005988
 8004fb0:	08005988 	.word	0x08005988
 8004fb4:	0800598c 	.word	0x0800598c

08004fb8 <__retarget_lock_acquire_recursive>:
 8004fb8:	4770      	bx	lr

08004fba <__retarget_lock_release_recursive>:
 8004fba:	4770      	bx	lr

08004fbc <_free_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4605      	mov	r5, r0
 8004fc0:	2900      	cmp	r1, #0
 8004fc2:	d041      	beq.n	8005048 <_free_r+0x8c>
 8004fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fc8:	1f0c      	subs	r4, r1, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bfb8      	it	lt
 8004fce:	18e4      	addlt	r4, r4, r3
 8004fd0:	f000 f8e0 	bl	8005194 <__malloc_lock>
 8004fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800504c <_free_r+0x90>)
 8004fd6:	6813      	ldr	r3, [r2, #0]
 8004fd8:	b933      	cbnz	r3, 8004fe8 <_free_r+0x2c>
 8004fda:	6063      	str	r3, [r4, #4]
 8004fdc:	6014      	str	r4, [r2, #0]
 8004fde:	4628      	mov	r0, r5
 8004fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fe4:	f000 b8dc 	b.w	80051a0 <__malloc_unlock>
 8004fe8:	42a3      	cmp	r3, r4
 8004fea:	d908      	bls.n	8004ffe <_free_r+0x42>
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	1821      	adds	r1, r4, r0
 8004ff0:	428b      	cmp	r3, r1
 8004ff2:	bf01      	itttt	eq
 8004ff4:	6819      	ldreq	r1, [r3, #0]
 8004ff6:	685b      	ldreq	r3, [r3, #4]
 8004ff8:	1809      	addeq	r1, r1, r0
 8004ffa:	6021      	streq	r1, [r4, #0]
 8004ffc:	e7ed      	b.n	8004fda <_free_r+0x1e>
 8004ffe:	461a      	mov	r2, r3
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	b10b      	cbz	r3, 8005008 <_free_r+0x4c>
 8005004:	42a3      	cmp	r3, r4
 8005006:	d9fa      	bls.n	8004ffe <_free_r+0x42>
 8005008:	6811      	ldr	r1, [r2, #0]
 800500a:	1850      	adds	r0, r2, r1
 800500c:	42a0      	cmp	r0, r4
 800500e:	d10b      	bne.n	8005028 <_free_r+0x6c>
 8005010:	6820      	ldr	r0, [r4, #0]
 8005012:	4401      	add	r1, r0
 8005014:	1850      	adds	r0, r2, r1
 8005016:	4283      	cmp	r3, r0
 8005018:	6011      	str	r1, [r2, #0]
 800501a:	d1e0      	bne.n	8004fde <_free_r+0x22>
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	6053      	str	r3, [r2, #4]
 8005022:	4408      	add	r0, r1
 8005024:	6010      	str	r0, [r2, #0]
 8005026:	e7da      	b.n	8004fde <_free_r+0x22>
 8005028:	d902      	bls.n	8005030 <_free_r+0x74>
 800502a:	230c      	movs	r3, #12
 800502c:	602b      	str	r3, [r5, #0]
 800502e:	e7d6      	b.n	8004fde <_free_r+0x22>
 8005030:	6820      	ldr	r0, [r4, #0]
 8005032:	1821      	adds	r1, r4, r0
 8005034:	428b      	cmp	r3, r1
 8005036:	bf04      	itt	eq
 8005038:	6819      	ldreq	r1, [r3, #0]
 800503a:	685b      	ldreq	r3, [r3, #4]
 800503c:	6063      	str	r3, [r4, #4]
 800503e:	bf04      	itt	eq
 8005040:	1809      	addeq	r1, r1, r0
 8005042:	6021      	streq	r1, [r4, #0]
 8005044:	6054      	str	r4, [r2, #4]
 8005046:	e7ca      	b.n	8004fde <_free_r+0x22>
 8005048:	bd38      	pop	{r3, r4, r5, pc}
 800504a:	bf00      	nop
 800504c:	20001a90 	.word	0x20001a90

08005050 <sbrk_aligned>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	4e0f      	ldr	r6, [pc, #60]	@ (8005090 <sbrk_aligned+0x40>)
 8005054:	460c      	mov	r4, r1
 8005056:	6831      	ldr	r1, [r6, #0]
 8005058:	4605      	mov	r5, r0
 800505a:	b911      	cbnz	r1, 8005062 <sbrk_aligned+0x12>
 800505c:	f000 fba6 	bl	80057ac <_sbrk_r>
 8005060:	6030      	str	r0, [r6, #0]
 8005062:	4621      	mov	r1, r4
 8005064:	4628      	mov	r0, r5
 8005066:	f000 fba1 	bl	80057ac <_sbrk_r>
 800506a:	1c43      	adds	r3, r0, #1
 800506c:	d103      	bne.n	8005076 <sbrk_aligned+0x26>
 800506e:	f04f 34ff 	mov.w	r4, #4294967295
 8005072:	4620      	mov	r0, r4
 8005074:	bd70      	pop	{r4, r5, r6, pc}
 8005076:	1cc4      	adds	r4, r0, #3
 8005078:	f024 0403 	bic.w	r4, r4, #3
 800507c:	42a0      	cmp	r0, r4
 800507e:	d0f8      	beq.n	8005072 <sbrk_aligned+0x22>
 8005080:	1a21      	subs	r1, r4, r0
 8005082:	4628      	mov	r0, r5
 8005084:	f000 fb92 	bl	80057ac <_sbrk_r>
 8005088:	3001      	adds	r0, #1
 800508a:	d1f2      	bne.n	8005072 <sbrk_aligned+0x22>
 800508c:	e7ef      	b.n	800506e <sbrk_aligned+0x1e>
 800508e:	bf00      	nop
 8005090:	20001a8c 	.word	0x20001a8c

08005094 <_malloc_r>:
 8005094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005098:	1ccd      	adds	r5, r1, #3
 800509a:	f025 0503 	bic.w	r5, r5, #3
 800509e:	3508      	adds	r5, #8
 80050a0:	2d0c      	cmp	r5, #12
 80050a2:	bf38      	it	cc
 80050a4:	250c      	movcc	r5, #12
 80050a6:	2d00      	cmp	r5, #0
 80050a8:	4606      	mov	r6, r0
 80050aa:	db01      	blt.n	80050b0 <_malloc_r+0x1c>
 80050ac:	42a9      	cmp	r1, r5
 80050ae:	d904      	bls.n	80050ba <_malloc_r+0x26>
 80050b0:	230c      	movs	r3, #12
 80050b2:	6033      	str	r3, [r6, #0]
 80050b4:	2000      	movs	r0, #0
 80050b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005190 <_malloc_r+0xfc>
 80050be:	f000 f869 	bl	8005194 <__malloc_lock>
 80050c2:	f8d8 3000 	ldr.w	r3, [r8]
 80050c6:	461c      	mov	r4, r3
 80050c8:	bb44      	cbnz	r4, 800511c <_malloc_r+0x88>
 80050ca:	4629      	mov	r1, r5
 80050cc:	4630      	mov	r0, r6
 80050ce:	f7ff ffbf 	bl	8005050 <sbrk_aligned>
 80050d2:	1c43      	adds	r3, r0, #1
 80050d4:	4604      	mov	r4, r0
 80050d6:	d158      	bne.n	800518a <_malloc_r+0xf6>
 80050d8:	f8d8 4000 	ldr.w	r4, [r8]
 80050dc:	4627      	mov	r7, r4
 80050de:	2f00      	cmp	r7, #0
 80050e0:	d143      	bne.n	800516a <_malloc_r+0xd6>
 80050e2:	2c00      	cmp	r4, #0
 80050e4:	d04b      	beq.n	800517e <_malloc_r+0xea>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	4639      	mov	r1, r7
 80050ea:	4630      	mov	r0, r6
 80050ec:	eb04 0903 	add.w	r9, r4, r3
 80050f0:	f000 fb5c 	bl	80057ac <_sbrk_r>
 80050f4:	4581      	cmp	r9, r0
 80050f6:	d142      	bne.n	800517e <_malloc_r+0xea>
 80050f8:	6821      	ldr	r1, [r4, #0]
 80050fa:	1a6d      	subs	r5, r5, r1
 80050fc:	4629      	mov	r1, r5
 80050fe:	4630      	mov	r0, r6
 8005100:	f7ff ffa6 	bl	8005050 <sbrk_aligned>
 8005104:	3001      	adds	r0, #1
 8005106:	d03a      	beq.n	800517e <_malloc_r+0xea>
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	442b      	add	r3, r5
 800510c:	6023      	str	r3, [r4, #0]
 800510e:	f8d8 3000 	ldr.w	r3, [r8]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	bb62      	cbnz	r2, 8005170 <_malloc_r+0xdc>
 8005116:	f8c8 7000 	str.w	r7, [r8]
 800511a:	e00f      	b.n	800513c <_malloc_r+0xa8>
 800511c:	6822      	ldr	r2, [r4, #0]
 800511e:	1b52      	subs	r2, r2, r5
 8005120:	d420      	bmi.n	8005164 <_malloc_r+0xd0>
 8005122:	2a0b      	cmp	r2, #11
 8005124:	d917      	bls.n	8005156 <_malloc_r+0xc2>
 8005126:	1961      	adds	r1, r4, r5
 8005128:	42a3      	cmp	r3, r4
 800512a:	6025      	str	r5, [r4, #0]
 800512c:	bf18      	it	ne
 800512e:	6059      	strne	r1, [r3, #4]
 8005130:	6863      	ldr	r3, [r4, #4]
 8005132:	bf08      	it	eq
 8005134:	f8c8 1000 	streq.w	r1, [r8]
 8005138:	5162      	str	r2, [r4, r5]
 800513a:	604b      	str	r3, [r1, #4]
 800513c:	4630      	mov	r0, r6
 800513e:	f000 f82f 	bl	80051a0 <__malloc_unlock>
 8005142:	f104 000b 	add.w	r0, r4, #11
 8005146:	1d23      	adds	r3, r4, #4
 8005148:	f020 0007 	bic.w	r0, r0, #7
 800514c:	1ac2      	subs	r2, r0, r3
 800514e:	bf1c      	itt	ne
 8005150:	1a1b      	subne	r3, r3, r0
 8005152:	50a3      	strne	r3, [r4, r2]
 8005154:	e7af      	b.n	80050b6 <_malloc_r+0x22>
 8005156:	6862      	ldr	r2, [r4, #4]
 8005158:	42a3      	cmp	r3, r4
 800515a:	bf0c      	ite	eq
 800515c:	f8c8 2000 	streq.w	r2, [r8]
 8005160:	605a      	strne	r2, [r3, #4]
 8005162:	e7eb      	b.n	800513c <_malloc_r+0xa8>
 8005164:	4623      	mov	r3, r4
 8005166:	6864      	ldr	r4, [r4, #4]
 8005168:	e7ae      	b.n	80050c8 <_malloc_r+0x34>
 800516a:	463c      	mov	r4, r7
 800516c:	687f      	ldr	r7, [r7, #4]
 800516e:	e7b6      	b.n	80050de <_malloc_r+0x4a>
 8005170:	461a      	mov	r2, r3
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	42a3      	cmp	r3, r4
 8005176:	d1fb      	bne.n	8005170 <_malloc_r+0xdc>
 8005178:	2300      	movs	r3, #0
 800517a:	6053      	str	r3, [r2, #4]
 800517c:	e7de      	b.n	800513c <_malloc_r+0xa8>
 800517e:	230c      	movs	r3, #12
 8005180:	6033      	str	r3, [r6, #0]
 8005182:	4630      	mov	r0, r6
 8005184:	f000 f80c 	bl	80051a0 <__malloc_unlock>
 8005188:	e794      	b.n	80050b4 <_malloc_r+0x20>
 800518a:	6005      	str	r5, [r0, #0]
 800518c:	e7d6      	b.n	800513c <_malloc_r+0xa8>
 800518e:	bf00      	nop
 8005190:	20001a90 	.word	0x20001a90

08005194 <__malloc_lock>:
 8005194:	4801      	ldr	r0, [pc, #4]	@ (800519c <__malloc_lock+0x8>)
 8005196:	f7ff bf0f 	b.w	8004fb8 <__retarget_lock_acquire_recursive>
 800519a:	bf00      	nop
 800519c:	20001a88 	.word	0x20001a88

080051a0 <__malloc_unlock>:
 80051a0:	4801      	ldr	r0, [pc, #4]	@ (80051a8 <__malloc_unlock+0x8>)
 80051a2:	f7ff bf0a 	b.w	8004fba <__retarget_lock_release_recursive>
 80051a6:	bf00      	nop
 80051a8:	20001a88 	.word	0x20001a88

080051ac <__ssputs_r>:
 80051ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b0:	688e      	ldr	r6, [r1, #8]
 80051b2:	461f      	mov	r7, r3
 80051b4:	42be      	cmp	r6, r7
 80051b6:	680b      	ldr	r3, [r1, #0]
 80051b8:	4682      	mov	sl, r0
 80051ba:	460c      	mov	r4, r1
 80051bc:	4690      	mov	r8, r2
 80051be:	d82d      	bhi.n	800521c <__ssputs_r+0x70>
 80051c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80051c8:	d026      	beq.n	8005218 <__ssputs_r+0x6c>
 80051ca:	6965      	ldr	r5, [r4, #20]
 80051cc:	6909      	ldr	r1, [r1, #16]
 80051ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051d2:	eba3 0901 	sub.w	r9, r3, r1
 80051d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051da:	1c7b      	adds	r3, r7, #1
 80051dc:	444b      	add	r3, r9
 80051de:	106d      	asrs	r5, r5, #1
 80051e0:	429d      	cmp	r5, r3
 80051e2:	bf38      	it	cc
 80051e4:	461d      	movcc	r5, r3
 80051e6:	0553      	lsls	r3, r2, #21
 80051e8:	d527      	bpl.n	800523a <__ssputs_r+0x8e>
 80051ea:	4629      	mov	r1, r5
 80051ec:	f7ff ff52 	bl	8005094 <_malloc_r>
 80051f0:	4606      	mov	r6, r0
 80051f2:	b360      	cbz	r0, 800524e <__ssputs_r+0xa2>
 80051f4:	6921      	ldr	r1, [r4, #16]
 80051f6:	464a      	mov	r2, r9
 80051f8:	f000 fae8 	bl	80057cc <memcpy>
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005206:	81a3      	strh	r3, [r4, #12]
 8005208:	6126      	str	r6, [r4, #16]
 800520a:	6165      	str	r5, [r4, #20]
 800520c:	444e      	add	r6, r9
 800520e:	eba5 0509 	sub.w	r5, r5, r9
 8005212:	6026      	str	r6, [r4, #0]
 8005214:	60a5      	str	r5, [r4, #8]
 8005216:	463e      	mov	r6, r7
 8005218:	42be      	cmp	r6, r7
 800521a:	d900      	bls.n	800521e <__ssputs_r+0x72>
 800521c:	463e      	mov	r6, r7
 800521e:	6820      	ldr	r0, [r4, #0]
 8005220:	4632      	mov	r2, r6
 8005222:	4641      	mov	r1, r8
 8005224:	f000 faa8 	bl	8005778 <memmove>
 8005228:	68a3      	ldr	r3, [r4, #8]
 800522a:	1b9b      	subs	r3, r3, r6
 800522c:	60a3      	str	r3, [r4, #8]
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	4433      	add	r3, r6
 8005232:	6023      	str	r3, [r4, #0]
 8005234:	2000      	movs	r0, #0
 8005236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800523a:	462a      	mov	r2, r5
 800523c:	f000 fad4 	bl	80057e8 <_realloc_r>
 8005240:	4606      	mov	r6, r0
 8005242:	2800      	cmp	r0, #0
 8005244:	d1e0      	bne.n	8005208 <__ssputs_r+0x5c>
 8005246:	6921      	ldr	r1, [r4, #16]
 8005248:	4650      	mov	r0, sl
 800524a:	f7ff feb7 	bl	8004fbc <_free_r>
 800524e:	230c      	movs	r3, #12
 8005250:	f8ca 3000 	str.w	r3, [sl]
 8005254:	89a3      	ldrh	r3, [r4, #12]
 8005256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800525a:	81a3      	strh	r3, [r4, #12]
 800525c:	f04f 30ff 	mov.w	r0, #4294967295
 8005260:	e7e9      	b.n	8005236 <__ssputs_r+0x8a>
	...

08005264 <_svfiprintf_r>:
 8005264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005268:	4698      	mov	r8, r3
 800526a:	898b      	ldrh	r3, [r1, #12]
 800526c:	061b      	lsls	r3, r3, #24
 800526e:	b09d      	sub	sp, #116	@ 0x74
 8005270:	4607      	mov	r7, r0
 8005272:	460d      	mov	r5, r1
 8005274:	4614      	mov	r4, r2
 8005276:	d510      	bpl.n	800529a <_svfiprintf_r+0x36>
 8005278:	690b      	ldr	r3, [r1, #16]
 800527a:	b973      	cbnz	r3, 800529a <_svfiprintf_r+0x36>
 800527c:	2140      	movs	r1, #64	@ 0x40
 800527e:	f7ff ff09 	bl	8005094 <_malloc_r>
 8005282:	6028      	str	r0, [r5, #0]
 8005284:	6128      	str	r0, [r5, #16]
 8005286:	b930      	cbnz	r0, 8005296 <_svfiprintf_r+0x32>
 8005288:	230c      	movs	r3, #12
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	b01d      	add	sp, #116	@ 0x74
 8005292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005296:	2340      	movs	r3, #64	@ 0x40
 8005298:	616b      	str	r3, [r5, #20]
 800529a:	2300      	movs	r3, #0
 800529c:	9309      	str	r3, [sp, #36]	@ 0x24
 800529e:	2320      	movs	r3, #32
 80052a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80052a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80052a8:	2330      	movs	r3, #48	@ 0x30
 80052aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005448 <_svfiprintf_r+0x1e4>
 80052ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80052b2:	f04f 0901 	mov.w	r9, #1
 80052b6:	4623      	mov	r3, r4
 80052b8:	469a      	mov	sl, r3
 80052ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052be:	b10a      	cbz	r2, 80052c4 <_svfiprintf_r+0x60>
 80052c0:	2a25      	cmp	r2, #37	@ 0x25
 80052c2:	d1f9      	bne.n	80052b8 <_svfiprintf_r+0x54>
 80052c4:	ebba 0b04 	subs.w	fp, sl, r4
 80052c8:	d00b      	beq.n	80052e2 <_svfiprintf_r+0x7e>
 80052ca:	465b      	mov	r3, fp
 80052cc:	4622      	mov	r2, r4
 80052ce:	4629      	mov	r1, r5
 80052d0:	4638      	mov	r0, r7
 80052d2:	f7ff ff6b 	bl	80051ac <__ssputs_r>
 80052d6:	3001      	adds	r0, #1
 80052d8:	f000 80a7 	beq.w	800542a <_svfiprintf_r+0x1c6>
 80052dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052de:	445a      	add	r2, fp
 80052e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80052e2:	f89a 3000 	ldrb.w	r3, [sl]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 809f 	beq.w	800542a <_svfiprintf_r+0x1c6>
 80052ec:	2300      	movs	r3, #0
 80052ee:	f04f 32ff 	mov.w	r2, #4294967295
 80052f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052f6:	f10a 0a01 	add.w	sl, sl, #1
 80052fa:	9304      	str	r3, [sp, #16]
 80052fc:	9307      	str	r3, [sp, #28]
 80052fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005302:	931a      	str	r3, [sp, #104]	@ 0x68
 8005304:	4654      	mov	r4, sl
 8005306:	2205      	movs	r2, #5
 8005308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800530c:	484e      	ldr	r0, [pc, #312]	@ (8005448 <_svfiprintf_r+0x1e4>)
 800530e:	f7fa ff77 	bl	8000200 <memchr>
 8005312:	9a04      	ldr	r2, [sp, #16]
 8005314:	b9d8      	cbnz	r0, 800534e <_svfiprintf_r+0xea>
 8005316:	06d0      	lsls	r0, r2, #27
 8005318:	bf44      	itt	mi
 800531a:	2320      	movmi	r3, #32
 800531c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005320:	0711      	lsls	r1, r2, #28
 8005322:	bf44      	itt	mi
 8005324:	232b      	movmi	r3, #43	@ 0x2b
 8005326:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800532a:	f89a 3000 	ldrb.w	r3, [sl]
 800532e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005330:	d015      	beq.n	800535e <_svfiprintf_r+0xfa>
 8005332:	9a07      	ldr	r2, [sp, #28]
 8005334:	4654      	mov	r4, sl
 8005336:	2000      	movs	r0, #0
 8005338:	f04f 0c0a 	mov.w	ip, #10
 800533c:	4621      	mov	r1, r4
 800533e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005342:	3b30      	subs	r3, #48	@ 0x30
 8005344:	2b09      	cmp	r3, #9
 8005346:	d94b      	bls.n	80053e0 <_svfiprintf_r+0x17c>
 8005348:	b1b0      	cbz	r0, 8005378 <_svfiprintf_r+0x114>
 800534a:	9207      	str	r2, [sp, #28]
 800534c:	e014      	b.n	8005378 <_svfiprintf_r+0x114>
 800534e:	eba0 0308 	sub.w	r3, r0, r8
 8005352:	fa09 f303 	lsl.w	r3, r9, r3
 8005356:	4313      	orrs	r3, r2
 8005358:	9304      	str	r3, [sp, #16]
 800535a:	46a2      	mov	sl, r4
 800535c:	e7d2      	b.n	8005304 <_svfiprintf_r+0xa0>
 800535e:	9b03      	ldr	r3, [sp, #12]
 8005360:	1d19      	adds	r1, r3, #4
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	9103      	str	r1, [sp, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	bfbb      	ittet	lt
 800536a:	425b      	neglt	r3, r3
 800536c:	f042 0202 	orrlt.w	r2, r2, #2
 8005370:	9307      	strge	r3, [sp, #28]
 8005372:	9307      	strlt	r3, [sp, #28]
 8005374:	bfb8      	it	lt
 8005376:	9204      	strlt	r2, [sp, #16]
 8005378:	7823      	ldrb	r3, [r4, #0]
 800537a:	2b2e      	cmp	r3, #46	@ 0x2e
 800537c:	d10a      	bne.n	8005394 <_svfiprintf_r+0x130>
 800537e:	7863      	ldrb	r3, [r4, #1]
 8005380:	2b2a      	cmp	r3, #42	@ 0x2a
 8005382:	d132      	bne.n	80053ea <_svfiprintf_r+0x186>
 8005384:	9b03      	ldr	r3, [sp, #12]
 8005386:	1d1a      	adds	r2, r3, #4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	9203      	str	r2, [sp, #12]
 800538c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005390:	3402      	adds	r4, #2
 8005392:	9305      	str	r3, [sp, #20]
 8005394:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005458 <_svfiprintf_r+0x1f4>
 8005398:	7821      	ldrb	r1, [r4, #0]
 800539a:	2203      	movs	r2, #3
 800539c:	4650      	mov	r0, sl
 800539e:	f7fa ff2f 	bl	8000200 <memchr>
 80053a2:	b138      	cbz	r0, 80053b4 <_svfiprintf_r+0x150>
 80053a4:	9b04      	ldr	r3, [sp, #16]
 80053a6:	eba0 000a 	sub.w	r0, r0, sl
 80053aa:	2240      	movs	r2, #64	@ 0x40
 80053ac:	4082      	lsls	r2, r0
 80053ae:	4313      	orrs	r3, r2
 80053b0:	3401      	adds	r4, #1
 80053b2:	9304      	str	r3, [sp, #16]
 80053b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053b8:	4824      	ldr	r0, [pc, #144]	@ (800544c <_svfiprintf_r+0x1e8>)
 80053ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053be:	2206      	movs	r2, #6
 80053c0:	f7fa ff1e 	bl	8000200 <memchr>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d036      	beq.n	8005436 <_svfiprintf_r+0x1d2>
 80053c8:	4b21      	ldr	r3, [pc, #132]	@ (8005450 <_svfiprintf_r+0x1ec>)
 80053ca:	bb1b      	cbnz	r3, 8005414 <_svfiprintf_r+0x1b0>
 80053cc:	9b03      	ldr	r3, [sp, #12]
 80053ce:	3307      	adds	r3, #7
 80053d0:	f023 0307 	bic.w	r3, r3, #7
 80053d4:	3308      	adds	r3, #8
 80053d6:	9303      	str	r3, [sp, #12]
 80053d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053da:	4433      	add	r3, r6
 80053dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80053de:	e76a      	b.n	80052b6 <_svfiprintf_r+0x52>
 80053e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80053e4:	460c      	mov	r4, r1
 80053e6:	2001      	movs	r0, #1
 80053e8:	e7a8      	b.n	800533c <_svfiprintf_r+0xd8>
 80053ea:	2300      	movs	r3, #0
 80053ec:	3401      	adds	r4, #1
 80053ee:	9305      	str	r3, [sp, #20]
 80053f0:	4619      	mov	r1, r3
 80053f2:	f04f 0c0a 	mov.w	ip, #10
 80053f6:	4620      	mov	r0, r4
 80053f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053fc:	3a30      	subs	r2, #48	@ 0x30
 80053fe:	2a09      	cmp	r2, #9
 8005400:	d903      	bls.n	800540a <_svfiprintf_r+0x1a6>
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0c6      	beq.n	8005394 <_svfiprintf_r+0x130>
 8005406:	9105      	str	r1, [sp, #20]
 8005408:	e7c4      	b.n	8005394 <_svfiprintf_r+0x130>
 800540a:	fb0c 2101 	mla	r1, ip, r1, r2
 800540e:	4604      	mov	r4, r0
 8005410:	2301      	movs	r3, #1
 8005412:	e7f0      	b.n	80053f6 <_svfiprintf_r+0x192>
 8005414:	ab03      	add	r3, sp, #12
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	462a      	mov	r2, r5
 800541a:	4b0e      	ldr	r3, [pc, #56]	@ (8005454 <_svfiprintf_r+0x1f0>)
 800541c:	a904      	add	r1, sp, #16
 800541e:	4638      	mov	r0, r7
 8005420:	f3af 8000 	nop.w
 8005424:	1c42      	adds	r2, r0, #1
 8005426:	4606      	mov	r6, r0
 8005428:	d1d6      	bne.n	80053d8 <_svfiprintf_r+0x174>
 800542a:	89ab      	ldrh	r3, [r5, #12]
 800542c:	065b      	lsls	r3, r3, #25
 800542e:	f53f af2d 	bmi.w	800528c <_svfiprintf_r+0x28>
 8005432:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005434:	e72c      	b.n	8005290 <_svfiprintf_r+0x2c>
 8005436:	ab03      	add	r3, sp, #12
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	462a      	mov	r2, r5
 800543c:	4b05      	ldr	r3, [pc, #20]	@ (8005454 <_svfiprintf_r+0x1f0>)
 800543e:	a904      	add	r1, sp, #16
 8005440:	4638      	mov	r0, r7
 8005442:	f000 f879 	bl	8005538 <_printf_i>
 8005446:	e7ed      	b.n	8005424 <_svfiprintf_r+0x1c0>
 8005448:	0800594c 	.word	0x0800594c
 800544c:	08005956 	.word	0x08005956
 8005450:	00000000 	.word	0x00000000
 8005454:	080051ad 	.word	0x080051ad
 8005458:	08005952 	.word	0x08005952

0800545c <_printf_common>:
 800545c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005460:	4616      	mov	r6, r2
 8005462:	4698      	mov	r8, r3
 8005464:	688a      	ldr	r2, [r1, #8]
 8005466:	690b      	ldr	r3, [r1, #16]
 8005468:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800546c:	4293      	cmp	r3, r2
 800546e:	bfb8      	it	lt
 8005470:	4613      	movlt	r3, r2
 8005472:	6033      	str	r3, [r6, #0]
 8005474:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005478:	4607      	mov	r7, r0
 800547a:	460c      	mov	r4, r1
 800547c:	b10a      	cbz	r2, 8005482 <_printf_common+0x26>
 800547e:	3301      	adds	r3, #1
 8005480:	6033      	str	r3, [r6, #0]
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	0699      	lsls	r1, r3, #26
 8005486:	bf42      	ittt	mi
 8005488:	6833      	ldrmi	r3, [r6, #0]
 800548a:	3302      	addmi	r3, #2
 800548c:	6033      	strmi	r3, [r6, #0]
 800548e:	6825      	ldr	r5, [r4, #0]
 8005490:	f015 0506 	ands.w	r5, r5, #6
 8005494:	d106      	bne.n	80054a4 <_printf_common+0x48>
 8005496:	f104 0a19 	add.w	sl, r4, #25
 800549a:	68e3      	ldr	r3, [r4, #12]
 800549c:	6832      	ldr	r2, [r6, #0]
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	42ab      	cmp	r3, r5
 80054a2:	dc26      	bgt.n	80054f2 <_printf_common+0x96>
 80054a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054a8:	6822      	ldr	r2, [r4, #0]
 80054aa:	3b00      	subs	r3, #0
 80054ac:	bf18      	it	ne
 80054ae:	2301      	movne	r3, #1
 80054b0:	0692      	lsls	r2, r2, #26
 80054b2:	d42b      	bmi.n	800550c <_printf_common+0xb0>
 80054b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054b8:	4641      	mov	r1, r8
 80054ba:	4638      	mov	r0, r7
 80054bc:	47c8      	blx	r9
 80054be:	3001      	adds	r0, #1
 80054c0:	d01e      	beq.n	8005500 <_printf_common+0xa4>
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	6922      	ldr	r2, [r4, #16]
 80054c6:	f003 0306 	and.w	r3, r3, #6
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	bf02      	ittt	eq
 80054ce:	68e5      	ldreq	r5, [r4, #12]
 80054d0:	6833      	ldreq	r3, [r6, #0]
 80054d2:	1aed      	subeq	r5, r5, r3
 80054d4:	68a3      	ldr	r3, [r4, #8]
 80054d6:	bf0c      	ite	eq
 80054d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054dc:	2500      	movne	r5, #0
 80054de:	4293      	cmp	r3, r2
 80054e0:	bfc4      	itt	gt
 80054e2:	1a9b      	subgt	r3, r3, r2
 80054e4:	18ed      	addgt	r5, r5, r3
 80054e6:	2600      	movs	r6, #0
 80054e8:	341a      	adds	r4, #26
 80054ea:	42b5      	cmp	r5, r6
 80054ec:	d11a      	bne.n	8005524 <_printf_common+0xc8>
 80054ee:	2000      	movs	r0, #0
 80054f0:	e008      	b.n	8005504 <_printf_common+0xa8>
 80054f2:	2301      	movs	r3, #1
 80054f4:	4652      	mov	r2, sl
 80054f6:	4641      	mov	r1, r8
 80054f8:	4638      	mov	r0, r7
 80054fa:	47c8      	blx	r9
 80054fc:	3001      	adds	r0, #1
 80054fe:	d103      	bne.n	8005508 <_printf_common+0xac>
 8005500:	f04f 30ff 	mov.w	r0, #4294967295
 8005504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005508:	3501      	adds	r5, #1
 800550a:	e7c6      	b.n	800549a <_printf_common+0x3e>
 800550c:	18e1      	adds	r1, r4, r3
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	2030      	movs	r0, #48	@ 0x30
 8005512:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005516:	4422      	add	r2, r4
 8005518:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800551c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005520:	3302      	adds	r3, #2
 8005522:	e7c7      	b.n	80054b4 <_printf_common+0x58>
 8005524:	2301      	movs	r3, #1
 8005526:	4622      	mov	r2, r4
 8005528:	4641      	mov	r1, r8
 800552a:	4638      	mov	r0, r7
 800552c:	47c8      	blx	r9
 800552e:	3001      	adds	r0, #1
 8005530:	d0e6      	beq.n	8005500 <_printf_common+0xa4>
 8005532:	3601      	adds	r6, #1
 8005534:	e7d9      	b.n	80054ea <_printf_common+0x8e>
	...

08005538 <_printf_i>:
 8005538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800553c:	7e0f      	ldrb	r7, [r1, #24]
 800553e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005540:	2f78      	cmp	r7, #120	@ 0x78
 8005542:	4691      	mov	r9, r2
 8005544:	4680      	mov	r8, r0
 8005546:	460c      	mov	r4, r1
 8005548:	469a      	mov	sl, r3
 800554a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800554e:	d807      	bhi.n	8005560 <_printf_i+0x28>
 8005550:	2f62      	cmp	r7, #98	@ 0x62
 8005552:	d80a      	bhi.n	800556a <_printf_i+0x32>
 8005554:	2f00      	cmp	r7, #0
 8005556:	f000 80d2 	beq.w	80056fe <_printf_i+0x1c6>
 800555a:	2f58      	cmp	r7, #88	@ 0x58
 800555c:	f000 80b9 	beq.w	80056d2 <_printf_i+0x19a>
 8005560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005564:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005568:	e03a      	b.n	80055e0 <_printf_i+0xa8>
 800556a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800556e:	2b15      	cmp	r3, #21
 8005570:	d8f6      	bhi.n	8005560 <_printf_i+0x28>
 8005572:	a101      	add	r1, pc, #4	@ (adr r1, 8005578 <_printf_i+0x40>)
 8005574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005578:	080055d1 	.word	0x080055d1
 800557c:	080055e5 	.word	0x080055e5
 8005580:	08005561 	.word	0x08005561
 8005584:	08005561 	.word	0x08005561
 8005588:	08005561 	.word	0x08005561
 800558c:	08005561 	.word	0x08005561
 8005590:	080055e5 	.word	0x080055e5
 8005594:	08005561 	.word	0x08005561
 8005598:	08005561 	.word	0x08005561
 800559c:	08005561 	.word	0x08005561
 80055a0:	08005561 	.word	0x08005561
 80055a4:	080056e5 	.word	0x080056e5
 80055a8:	0800560f 	.word	0x0800560f
 80055ac:	0800569f 	.word	0x0800569f
 80055b0:	08005561 	.word	0x08005561
 80055b4:	08005561 	.word	0x08005561
 80055b8:	08005707 	.word	0x08005707
 80055bc:	08005561 	.word	0x08005561
 80055c0:	0800560f 	.word	0x0800560f
 80055c4:	08005561 	.word	0x08005561
 80055c8:	08005561 	.word	0x08005561
 80055cc:	080056a7 	.word	0x080056a7
 80055d0:	6833      	ldr	r3, [r6, #0]
 80055d2:	1d1a      	adds	r2, r3, #4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6032      	str	r2, [r6, #0]
 80055d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055e0:	2301      	movs	r3, #1
 80055e2:	e09d      	b.n	8005720 <_printf_i+0x1e8>
 80055e4:	6833      	ldr	r3, [r6, #0]
 80055e6:	6820      	ldr	r0, [r4, #0]
 80055e8:	1d19      	adds	r1, r3, #4
 80055ea:	6031      	str	r1, [r6, #0]
 80055ec:	0606      	lsls	r6, r0, #24
 80055ee:	d501      	bpl.n	80055f4 <_printf_i+0xbc>
 80055f0:	681d      	ldr	r5, [r3, #0]
 80055f2:	e003      	b.n	80055fc <_printf_i+0xc4>
 80055f4:	0645      	lsls	r5, r0, #25
 80055f6:	d5fb      	bpl.n	80055f0 <_printf_i+0xb8>
 80055f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055fc:	2d00      	cmp	r5, #0
 80055fe:	da03      	bge.n	8005608 <_printf_i+0xd0>
 8005600:	232d      	movs	r3, #45	@ 0x2d
 8005602:	426d      	negs	r5, r5
 8005604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005608:	4859      	ldr	r0, [pc, #356]	@ (8005770 <_printf_i+0x238>)
 800560a:	230a      	movs	r3, #10
 800560c:	e011      	b.n	8005632 <_printf_i+0xfa>
 800560e:	6821      	ldr	r1, [r4, #0]
 8005610:	6833      	ldr	r3, [r6, #0]
 8005612:	0608      	lsls	r0, r1, #24
 8005614:	f853 5b04 	ldr.w	r5, [r3], #4
 8005618:	d402      	bmi.n	8005620 <_printf_i+0xe8>
 800561a:	0649      	lsls	r1, r1, #25
 800561c:	bf48      	it	mi
 800561e:	b2ad      	uxthmi	r5, r5
 8005620:	2f6f      	cmp	r7, #111	@ 0x6f
 8005622:	4853      	ldr	r0, [pc, #332]	@ (8005770 <_printf_i+0x238>)
 8005624:	6033      	str	r3, [r6, #0]
 8005626:	bf14      	ite	ne
 8005628:	230a      	movne	r3, #10
 800562a:	2308      	moveq	r3, #8
 800562c:	2100      	movs	r1, #0
 800562e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005632:	6866      	ldr	r6, [r4, #4]
 8005634:	60a6      	str	r6, [r4, #8]
 8005636:	2e00      	cmp	r6, #0
 8005638:	bfa2      	ittt	ge
 800563a:	6821      	ldrge	r1, [r4, #0]
 800563c:	f021 0104 	bicge.w	r1, r1, #4
 8005640:	6021      	strge	r1, [r4, #0]
 8005642:	b90d      	cbnz	r5, 8005648 <_printf_i+0x110>
 8005644:	2e00      	cmp	r6, #0
 8005646:	d04b      	beq.n	80056e0 <_printf_i+0x1a8>
 8005648:	4616      	mov	r6, r2
 800564a:	fbb5 f1f3 	udiv	r1, r5, r3
 800564e:	fb03 5711 	mls	r7, r3, r1, r5
 8005652:	5dc7      	ldrb	r7, [r0, r7]
 8005654:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005658:	462f      	mov	r7, r5
 800565a:	42bb      	cmp	r3, r7
 800565c:	460d      	mov	r5, r1
 800565e:	d9f4      	bls.n	800564a <_printf_i+0x112>
 8005660:	2b08      	cmp	r3, #8
 8005662:	d10b      	bne.n	800567c <_printf_i+0x144>
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	07df      	lsls	r7, r3, #31
 8005668:	d508      	bpl.n	800567c <_printf_i+0x144>
 800566a:	6923      	ldr	r3, [r4, #16]
 800566c:	6861      	ldr	r1, [r4, #4]
 800566e:	4299      	cmp	r1, r3
 8005670:	bfde      	ittt	le
 8005672:	2330      	movle	r3, #48	@ 0x30
 8005674:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005678:	f106 36ff 	addle.w	r6, r6, #4294967295
 800567c:	1b92      	subs	r2, r2, r6
 800567e:	6122      	str	r2, [r4, #16]
 8005680:	f8cd a000 	str.w	sl, [sp]
 8005684:	464b      	mov	r3, r9
 8005686:	aa03      	add	r2, sp, #12
 8005688:	4621      	mov	r1, r4
 800568a:	4640      	mov	r0, r8
 800568c:	f7ff fee6 	bl	800545c <_printf_common>
 8005690:	3001      	adds	r0, #1
 8005692:	d14a      	bne.n	800572a <_printf_i+0x1f2>
 8005694:	f04f 30ff 	mov.w	r0, #4294967295
 8005698:	b004      	add	sp, #16
 800569a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	f043 0320 	orr.w	r3, r3, #32
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	4833      	ldr	r0, [pc, #204]	@ (8005774 <_printf_i+0x23c>)
 80056a8:	2778      	movs	r7, #120	@ 0x78
 80056aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	6831      	ldr	r1, [r6, #0]
 80056b2:	061f      	lsls	r7, r3, #24
 80056b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80056b8:	d402      	bmi.n	80056c0 <_printf_i+0x188>
 80056ba:	065f      	lsls	r7, r3, #25
 80056bc:	bf48      	it	mi
 80056be:	b2ad      	uxthmi	r5, r5
 80056c0:	6031      	str	r1, [r6, #0]
 80056c2:	07d9      	lsls	r1, r3, #31
 80056c4:	bf44      	itt	mi
 80056c6:	f043 0320 	orrmi.w	r3, r3, #32
 80056ca:	6023      	strmi	r3, [r4, #0]
 80056cc:	b11d      	cbz	r5, 80056d6 <_printf_i+0x19e>
 80056ce:	2310      	movs	r3, #16
 80056d0:	e7ac      	b.n	800562c <_printf_i+0xf4>
 80056d2:	4827      	ldr	r0, [pc, #156]	@ (8005770 <_printf_i+0x238>)
 80056d4:	e7e9      	b.n	80056aa <_printf_i+0x172>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	f023 0320 	bic.w	r3, r3, #32
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	e7f6      	b.n	80056ce <_printf_i+0x196>
 80056e0:	4616      	mov	r6, r2
 80056e2:	e7bd      	b.n	8005660 <_printf_i+0x128>
 80056e4:	6833      	ldr	r3, [r6, #0]
 80056e6:	6825      	ldr	r5, [r4, #0]
 80056e8:	6961      	ldr	r1, [r4, #20]
 80056ea:	1d18      	adds	r0, r3, #4
 80056ec:	6030      	str	r0, [r6, #0]
 80056ee:	062e      	lsls	r6, r5, #24
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	d501      	bpl.n	80056f8 <_printf_i+0x1c0>
 80056f4:	6019      	str	r1, [r3, #0]
 80056f6:	e002      	b.n	80056fe <_printf_i+0x1c6>
 80056f8:	0668      	lsls	r0, r5, #25
 80056fa:	d5fb      	bpl.n	80056f4 <_printf_i+0x1bc>
 80056fc:	8019      	strh	r1, [r3, #0]
 80056fe:	2300      	movs	r3, #0
 8005700:	6123      	str	r3, [r4, #16]
 8005702:	4616      	mov	r6, r2
 8005704:	e7bc      	b.n	8005680 <_printf_i+0x148>
 8005706:	6833      	ldr	r3, [r6, #0]
 8005708:	1d1a      	adds	r2, r3, #4
 800570a:	6032      	str	r2, [r6, #0]
 800570c:	681e      	ldr	r6, [r3, #0]
 800570e:	6862      	ldr	r2, [r4, #4]
 8005710:	2100      	movs	r1, #0
 8005712:	4630      	mov	r0, r6
 8005714:	f7fa fd74 	bl	8000200 <memchr>
 8005718:	b108      	cbz	r0, 800571e <_printf_i+0x1e6>
 800571a:	1b80      	subs	r0, r0, r6
 800571c:	6060      	str	r0, [r4, #4]
 800571e:	6863      	ldr	r3, [r4, #4]
 8005720:	6123      	str	r3, [r4, #16]
 8005722:	2300      	movs	r3, #0
 8005724:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005728:	e7aa      	b.n	8005680 <_printf_i+0x148>
 800572a:	6923      	ldr	r3, [r4, #16]
 800572c:	4632      	mov	r2, r6
 800572e:	4649      	mov	r1, r9
 8005730:	4640      	mov	r0, r8
 8005732:	47d0      	blx	sl
 8005734:	3001      	adds	r0, #1
 8005736:	d0ad      	beq.n	8005694 <_printf_i+0x15c>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	079b      	lsls	r3, r3, #30
 800573c:	d413      	bmi.n	8005766 <_printf_i+0x22e>
 800573e:	68e0      	ldr	r0, [r4, #12]
 8005740:	9b03      	ldr	r3, [sp, #12]
 8005742:	4298      	cmp	r0, r3
 8005744:	bfb8      	it	lt
 8005746:	4618      	movlt	r0, r3
 8005748:	e7a6      	b.n	8005698 <_printf_i+0x160>
 800574a:	2301      	movs	r3, #1
 800574c:	4632      	mov	r2, r6
 800574e:	4649      	mov	r1, r9
 8005750:	4640      	mov	r0, r8
 8005752:	47d0      	blx	sl
 8005754:	3001      	adds	r0, #1
 8005756:	d09d      	beq.n	8005694 <_printf_i+0x15c>
 8005758:	3501      	adds	r5, #1
 800575a:	68e3      	ldr	r3, [r4, #12]
 800575c:	9903      	ldr	r1, [sp, #12]
 800575e:	1a5b      	subs	r3, r3, r1
 8005760:	42ab      	cmp	r3, r5
 8005762:	dcf2      	bgt.n	800574a <_printf_i+0x212>
 8005764:	e7eb      	b.n	800573e <_printf_i+0x206>
 8005766:	2500      	movs	r5, #0
 8005768:	f104 0619 	add.w	r6, r4, #25
 800576c:	e7f5      	b.n	800575a <_printf_i+0x222>
 800576e:	bf00      	nop
 8005770:	0800595d 	.word	0x0800595d
 8005774:	0800596e 	.word	0x0800596e

08005778 <memmove>:
 8005778:	4288      	cmp	r0, r1
 800577a:	b510      	push	{r4, lr}
 800577c:	eb01 0402 	add.w	r4, r1, r2
 8005780:	d902      	bls.n	8005788 <memmove+0x10>
 8005782:	4284      	cmp	r4, r0
 8005784:	4623      	mov	r3, r4
 8005786:	d807      	bhi.n	8005798 <memmove+0x20>
 8005788:	1e43      	subs	r3, r0, #1
 800578a:	42a1      	cmp	r1, r4
 800578c:	d008      	beq.n	80057a0 <memmove+0x28>
 800578e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005792:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005796:	e7f8      	b.n	800578a <memmove+0x12>
 8005798:	4402      	add	r2, r0
 800579a:	4601      	mov	r1, r0
 800579c:	428a      	cmp	r2, r1
 800579e:	d100      	bne.n	80057a2 <memmove+0x2a>
 80057a0:	bd10      	pop	{r4, pc}
 80057a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057aa:	e7f7      	b.n	800579c <memmove+0x24>

080057ac <_sbrk_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	4d06      	ldr	r5, [pc, #24]	@ (80057c8 <_sbrk_r+0x1c>)
 80057b0:	2300      	movs	r3, #0
 80057b2:	4604      	mov	r4, r0
 80057b4:	4608      	mov	r0, r1
 80057b6:	602b      	str	r3, [r5, #0]
 80057b8:	f7fb fabe 	bl	8000d38 <_sbrk>
 80057bc:	1c43      	adds	r3, r0, #1
 80057be:	d102      	bne.n	80057c6 <_sbrk_r+0x1a>
 80057c0:	682b      	ldr	r3, [r5, #0]
 80057c2:	b103      	cbz	r3, 80057c6 <_sbrk_r+0x1a>
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	bd38      	pop	{r3, r4, r5, pc}
 80057c8:	20001a84 	.word	0x20001a84

080057cc <memcpy>:
 80057cc:	440a      	add	r2, r1
 80057ce:	4291      	cmp	r1, r2
 80057d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80057d4:	d100      	bne.n	80057d8 <memcpy+0xc>
 80057d6:	4770      	bx	lr
 80057d8:	b510      	push	{r4, lr}
 80057da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057e2:	4291      	cmp	r1, r2
 80057e4:	d1f9      	bne.n	80057da <memcpy+0xe>
 80057e6:	bd10      	pop	{r4, pc}

080057e8 <_realloc_r>:
 80057e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ec:	4680      	mov	r8, r0
 80057ee:	4615      	mov	r5, r2
 80057f0:	460c      	mov	r4, r1
 80057f2:	b921      	cbnz	r1, 80057fe <_realloc_r+0x16>
 80057f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057f8:	4611      	mov	r1, r2
 80057fa:	f7ff bc4b 	b.w	8005094 <_malloc_r>
 80057fe:	b92a      	cbnz	r2, 800580c <_realloc_r+0x24>
 8005800:	f7ff fbdc 	bl	8004fbc <_free_r>
 8005804:	2400      	movs	r4, #0
 8005806:	4620      	mov	r0, r4
 8005808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800580c:	f000 f81a 	bl	8005844 <_malloc_usable_size_r>
 8005810:	4285      	cmp	r5, r0
 8005812:	4606      	mov	r6, r0
 8005814:	d802      	bhi.n	800581c <_realloc_r+0x34>
 8005816:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800581a:	d8f4      	bhi.n	8005806 <_realloc_r+0x1e>
 800581c:	4629      	mov	r1, r5
 800581e:	4640      	mov	r0, r8
 8005820:	f7ff fc38 	bl	8005094 <_malloc_r>
 8005824:	4607      	mov	r7, r0
 8005826:	2800      	cmp	r0, #0
 8005828:	d0ec      	beq.n	8005804 <_realloc_r+0x1c>
 800582a:	42b5      	cmp	r5, r6
 800582c:	462a      	mov	r2, r5
 800582e:	4621      	mov	r1, r4
 8005830:	bf28      	it	cs
 8005832:	4632      	movcs	r2, r6
 8005834:	f7ff ffca 	bl	80057cc <memcpy>
 8005838:	4621      	mov	r1, r4
 800583a:	4640      	mov	r0, r8
 800583c:	f7ff fbbe 	bl	8004fbc <_free_r>
 8005840:	463c      	mov	r4, r7
 8005842:	e7e0      	b.n	8005806 <_realloc_r+0x1e>

08005844 <_malloc_usable_size_r>:
 8005844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005848:	1f18      	subs	r0, r3, #4
 800584a:	2b00      	cmp	r3, #0
 800584c:	bfbc      	itt	lt
 800584e:	580b      	ldrlt	r3, [r1, r0]
 8005850:	18c0      	addlt	r0, r0, r3
 8005852:	4770      	bx	lr

08005854 <_init>:
 8005854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005856:	bf00      	nop
 8005858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585a:	bc08      	pop	{r3}
 800585c:	469e      	mov	lr, r3
 800585e:	4770      	bx	lr

08005860 <_fini>:
 8005860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005862:	bf00      	nop
 8005864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005866:	bc08      	pop	{r3}
 8005868:	469e      	mov	lr, r3
 800586a:	4770      	bx	lr
